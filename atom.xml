<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡博靖的技术博客</title>
  
  <subtitle>小清新IT旅程|为中华之崛起而读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hubojing.github.io/"/>
  <updated>2019-01-13T13:49:37.307Z</updated>
  <id>https://hubojing.github.io/</id>
  
  <author>
    <name>胡博靖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django博客demo</title>
    <link href="https://hubojing.github.io/2019/01/11/django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://hubojing.github.io/2019/01/11/django搭建博客/</id>
    <published>2019-01-11T10:19:51.000Z</published>
    <updated>2019-01-13T13:49:37.307Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1547395242880&di=51c657b409cc95bb168dde1d33880538&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171129%2F35c49523c50843f3ba22b8bc246c5d42.jpeg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>Django-blog-demo笔记。</strong><br><br><br> </div><a id="more"></a><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>　　python 3.7<br>　　Django 2.1.5<br>　　pycharm</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>　　cmd里敲：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==2.1.5</span><br></pre></td></tr></table></figure></p><h1 id="创建项目和应用"><a href="#创建项目和应用" class="headerlink" title="创建项目和应用"></a>创建项目和应用</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>　　在预想安装博客目录下计入cmd，敲：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject myblog</span><br></pre></td></tr></table></figure></p><p>　　对应目录下生成一个myblog文件夹。</p><p>　　manage.py:与项目进行交互的命令行工具集的入口<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py</span><br></pre></td></tr></table></figure></p><p>　　查看所有命令。</p><p>　　启动命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></p><p>　　浏览器127.0.0.1:8000查看效果。</p><p>　　改端口号：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8888</span></span><br></pre></td></tr></table></figure></p><h2 id="myblog目录"><a href="#myblog目录" class="headerlink" title="myblog目录"></a>myblog目录</h2><p>　　myblog<br>　　|–__init__.py<br>　　|–settings.py<br>　　|–urls.py<br>　　|–wsgi.py<br>　　manage.py</p><p>　　wsgi.py<br>　　WSGI(Python Web Server Gateway Interface)   Python服务器网关接口<br>　　Python应用与Web服务器之间的接口</p><p>　　urls.py<br>　　URL配置文件</p><p>　　settings.py<br>　　项目总配置文件，包含数据库、Web应用、时间等各种配置</p><p>　　__init__.py<br>　　内容默认为空</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>　　打开命令行，进入manage.py同级目录<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure></p><p>　　会多一个blog文件夹。<br>　　添加应用名到settings.py中的INSTALLED_APPS里<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="blog目录"><a href="#blog目录" class="headerlink" title="blog目录"></a>blog目录</h2><p>　　blog<br>　　|–migrations<br>　　|—-__init__.py<br>　　|–__init__.py<br>　　|–admin.py<br>　　|–apps.py<br>　　|–models.py<br>　　|–tests.py<br>　　|–views.py</p><p>　　migrations 数据移植（迁移）模块，内容自动生成</p><p>　　admin.py    该应用的后台管理系统配置<br>　　apps.py 应用配置（Django-1.9以后自动生成）<br>　　models.py   数据模块，使用ORM框架，类似于MVC结构中的Models(模型)<br>　　test.py 自动化测试模块，在此编写测试脚本（语句）<br>　　views.py    执行响应的代码所在模块，代码逻辑处理地（项目大部分代码在此）</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>　　打开view.py，输入<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello World!'</span>)</span><br></pre></td></tr></table></figure></p><p>　　即编辑blog.views<br>　　每个相应对应一个函数，函数必须返回一个响应<br>　　函数必须存在一个参数，一般约定为request<br>　　每个相应（函数）对应一个URL</p><p>在urls.py中，输入<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, bv.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　即编辑urls.py<br>　　url函数放在urlpatterns列表中<br>　　url函数三个参数：URL(正则)，对应方法，名称</p><p>　　运行，输入地址<a href="http://localhost:8000/index/" target="_blank" rel="noopener">http://localhost:8000/index/</a> 即可。</p><h2 id="第二种URL配置"><a href="#第二种URL配置" class="headerlink" title="第二种URL配置"></a>第二种URL配置</h2><p>　　如果页面很多，都写在根urls.py中就很乱。于是，在根urls.py中引入include，在APP目录下创建urls.py文件，格式与根urls.py相同。</p><p>　　更改后：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　新blog.urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h1 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h1><p>　　HTML文件使用了Django模板语言（Django Template Language, DTL）</p><h2 id="开发第一个Template"><a href="#开发第一个Template" class="headerlink" title="开发第一个Template"></a>开发第一个Template</h2><ul><li>在APP的<strong>根目录</strong>下创建名叫Templates的目录</li><li>在该目录下创建HTML文件</li><li>在views.py中返回<code>render()</code></li></ul><p>　　html中敲入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello blog!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改views.py为：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></p><p>　　运行查看效果。</p><h2 id="DTL初步使用"><a href="#DTL初步使用" class="headerlink" title="DTL初步使用"></a>DTL初步使用</h2><p>　　<code>render()</code>函数中支持一个dict类型参数<br>　　该字典是后台传递到模板的参数，键为参数名<br>　　在模板中使用<code></code>来直接使用</p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'hello'</span>:<span class="string">'Hello blog!'</span>&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>　　运行查看效果。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>　　通常，一个Model对应数据库的一张数据表<br>　　Django中Models以类的形式表现<br>　　它包含了一些基本字段以及数据的一些行为</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>　　对象关系映射（Object Relation Mapping）<br>　　实现了对象和数据库之间的映射<br>　　隐藏了数据访问的细节，不需要编写SQL语句</p><h2 id="编写Models"><a href="#编写Models" class="headerlink" title="编写Models"></a>编写Models</h2><ul><li>在应用根目录下创建models.py，并引入models模块</li><li>创建类，继承models.Model，该类即是一张数据表</li><li>在类中创建字段</li></ul><h3 id="字段创建"><a href="#字段创建" class="headerlink" title="字段创建"></a>字段创建</h3><p>　　字段即类里面的属性（变量）<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attr = models.CharField(max_length = <span class="number">64</span>)</span><br></pre></td></tr></table></figure></p><h3 id="生成数据表"><a href="#生成数据表" class="headerlink" title="生成数据表"></a>生成数据表</h3><p>　　命令行中进入manage.py同级目录<br>　　执行命令<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations app名（可选）</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><p>　　不加app名默认给所有app进行数据迁移。</p><p>　　cmd将显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">E:\PythonCode\myblog&gt;python manage.py makemigrations</span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'blog'</span>:</span><br><span class="line">  blog\migrations\0001_initial.py</span><br><span class="line">    - Create model Article</span><br><span class="line"></span><br><span class="line">E:\PythonCode\myblog&gt;python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, blog, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying blog.0001_initial... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></p><h3 id="生成数据表-1"><a href="#生成数据表-1" class="headerlink" title="生成数据表"></a>生成数据表</h3><p>　　查看<br>　　Django会自动在app/migrations/目录下生成移植文件<br>　　执行命令查看SQL语句<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate 应用名 文件id</span><br></pre></td></tr></table></figure></p><p>　　cmd将显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\PythonCode\myblog&gt;python manage.py sqlmigrate blog 0001</span><br><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Article</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"blog_article"</span> (<span class="string">"id"</span> <span class="built_in">integer</span> NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="string">"title"</span> varchar(32) NOT NULL, <span class="string">"content"</span> text NULL);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></p><p>　　默认sqlite3的数据库在项目根目录下db.sqlite3<br>　　查看并编辑db.sqlite3，使用第三方软件，如SQLite Expert Personal</p><h3 id="页面呈现数据"><a href="#页面呈现数据" class="headerlink" title="页面呈现数据"></a>页面呈现数据</h3><h4 id="后台步骤"><a href="#后台步骤" class="headerlink" title="后台步骤"></a>后台步骤</h4><p>　　views.py中import models<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">article = models.Article.objects.get(pk = <span class="number">1</span>)</span><br><span class="line">render(request, page, &#123;<span class="string">'article'</span>:article&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="后端步骤"><a href="#后端步骤" class="headerlink" title="后端步骤"></a>后端步骤</h4><p>　　模板可直接使用对象以及对象的“.”操作<br><code></code></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　运行，查看<a href="http://localhost:8000/index/" target="_blank" rel="noopener">http://localhost:8000/index/</a></p><h1 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h1><p>Django自带的一个功能强大的自动化数据管理界面<br>被授权的用户可直接在Admin中管理数据库<br>Django提供了许多针对Admin的定制功能</p><h2 id="配置Admin"><a href="#配置Admin" class="headerlink" title="配置Admin"></a>配置Admin</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建超级用户<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>之后要求输入用户名<br>邮箱<br>密码</p><p>Admin入口访问地址：localhost:8000/admin/</p><p>如需修改成中文版，修改settings.py中LANGUAGE_CODE = ‘zh_Hans’<br>（英文：LANGUAGE_CODE = ‘en-us’）</p><h3 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h3><p>在应用下admin.py中引入自身的models模块（或里面的模型类）<br>编辑admin.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line">admin.site.register(models.Article)</span><br></pre></td></tr></table></figure></p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>点击Article超链接进入Article列表页面，按页面指示修改。</p><h4 id="修改数据默认显示名称"><a href="#修改数据默认显示名称" class="headerlink" title="修改数据默认显示名称"></a>修改数据默认显示名称</h4><p>每条都显示的Article object，很不方便，显示文章标题比较好。</p><ul><li>在Article类下添加一个方法</li><li>根据Python版本选择<strong>str</strong>(self) (python3以上)或<strong>unicode</strong>(self) （python2.7）</li><li>return self.title</li></ul><h1 id="博客开发"><a href="#博客开发" class="headerlink" title="博客开发"></a>博客开发</h1><h2 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h2><p>　　博客主页面<br>　　博客文章内容页面<br>　　博客撰写页面</p><h3 id="主页面内容"><a href="#主页面内容" class="headerlink" title="主页面内容"></a>主页面内容</h3><p>　　文章标题列表，超链接<br>　　发表博客按钮（超链接）</p><h4 id="列表编写思路"><a href="#列表编写思路" class="headerlink" title="列表编写思路"></a>列表编写思路</h4><ul><li>取出数据库中所有文章对象</li><li>将文章对象们打包成列表，传递到前端</li><li>前端页面把文章以标题超链接的形式逐个列出</li></ul><p>　　模板For循环<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> xx <span class="keyword">in</span> xxs%&#125;</span><br><span class="line"><span class="comment"># HTML语句</span></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure></p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    articles = models.Article.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'articles'</span>: articles&#125;)</span><br></pre></td></tr></table></figure></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>新文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="页面内容"><a href="#页面内容" class="headerlink" title="页面内容"></a>页面内容</h2><p>　　标题<br>　　文章内容<br>　　修改文章按钮（超链接）</p><p>　　在templates中新增article_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    articles = models.Article.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'articles'</span>: articles&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    article=models.Article.objects.get(pk = article_id)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'article_page.html'</span>,&#123;<span class="string">'article'</span>:article&#125;)</span><br><span class="line">``</span><br><span class="line"><span class="comment">### URL传递参数</span></span><br><span class="line">　　参数写在相应函数中request后，可以有默认值</span><br><span class="line"></span><br><span class="line">　　修改blog下的urls.py</span><br><span class="line">```py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">    path(<span class="string">'article/&lt;article_id&gt;'</span>, views.article_page),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　顺便把myblog\urls.py里的index改成blog（非必要，只是更符合博客url）<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　运行，输入<a href="http://localhost:8000/blog/article/1" target="_blank" rel="noopener">http://localhost:8000/blog/article/1</a> 查看。</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>　　href后是目标地址，template中可用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%url <span class="string">'app_name:url_name'</span> param%&#125;</span><br></pre></td></tr></table></figure></p><p>　　其中app_name和url_name都在url中配置</p><h4 id="再配URL"><a href="#再配URL" class="headerlink" title="再配URL"></a>再配URL</h4><h5 id="uel函数的名称参数"><a href="#uel函数的名称参数" class="headerlink" title="uel函数的名称参数"></a>uel函数的名称参数</h5><p>　　法一：根urls，写在<code>include()</code>的第二个参数位置，<code>namespace=&#39;blog&#39;</code><br>　　法二：应用下则写在<code>url()</code>的第三个参数位置，<code>name=&#39;article&#39;</code><br>　　主要取决于是否使用<code>include</code>引用了另一个url配置文件</p><h2 id="撰写页面"><a href="#撰写页面" class="headerlink" title="撰写页面"></a>撰写页面</h2><p>　　标题编辑栏<br>　　文章内容编辑区域<br>　　提交按钮</p><p>　　新建edit_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　views.py新增<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'edit_page.html'</span>)</span><br></pre></td></tr></table></figure></p><p>　　blog\urls.py新增<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'edit'</span>, views.edit_page),</span><br></pre></td></tr></table></figure></p><p>　　运行，输入<a href="http://localhost:8000/blog/edit" target="_blank" rel="noopener">http://localhost:8000/blog/edit</a> 查看。</p><h3 id="编辑相应函数"><a href="#编辑相应函数" class="headerlink" title="编辑相应函数"></a>编辑相应函数</h3><p>　　使用<code>request.POST[&#39;参数名&#39;]</code>获取表单数据<br>　　models.Article.objects.create(title, content)创建对象</p><h2 id="两个编辑页面"><a href="#两个编辑页面" class="headerlink" title="两个编辑页面"></a>两个编辑页面</h2><p>　　思路：新文章为空，修改文章有内容<br>　　修改文章页面有文章对象<br>　　文章的ID</p><p>　　修改数据<br>　　article.title = title<br>　　article.save()</p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> str(article_id) == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'edit_page.html'</span>)</span><br><span class="line">    article = models.Article.objects.get(pk=article_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'edit_page.html'</span>, &#123;<span class="string">'article'</span>: article&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    title = request.POST.get(<span class="string">'title'</span>, <span class="string">'TITLE'</span>)</span><br><span class="line">    content = request.POST.get(<span class="string">'content'</span>, <span class="string">'CONTENT'</span>)</span><br><span class="line">    article_id = request.POST.get(<span class="string">'article_id'</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> article_id == <span class="string">'0'</span>:</span><br><span class="line">        models.Article.objects.create(title=title, content=content)</span><br><span class="line">        articles = models.Article.objects.all()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'articles'</span>: articles&#125;)</span><br><span class="line"></span><br><span class="line">    article = models.Article.objects.get(pk=article_id)</span><br><span class="line">    article.title = title</span><br><span class="line">    article.content = content</span><br><span class="line">    article.save()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'article_page.html'</span>, &#123;<span class="string">'article'</span>: article&#125;)</span><br></pre></td></tr></table></figure></p><p>　　修改blog\urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">    path(<span class="string">'article/(?P&lt;article_id&gt;[0-9]+)$'</span>, views.article_page,name=<span class="string">'article_page'</span>),</span><br><span class="line">    path(<span class="string">'edit/(?P&lt;article_id&gt;[0-9]+)$'</span>, views.edit_page,name=<span class="string">'edit_page'</span>),</span><br><span class="line">    path(<span class="string">'edit/Action$'</span>, views.edit_action,name=<span class="string">'edit_action'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　修改article_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:edit_page' article.id %&#125;"</span>&gt;</span>修改文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改主页index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:edit_page' 0 %&#125;"</span>&gt;</span>新文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:article_page' article.id %&#125;"</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改edit_page.gtml<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'blog:edit_action' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% if article %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.id&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.title&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.content&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Templates过滤器"><a href="#Templates过滤器" class="headerlink" title="Templates过滤器"></a>Templates过滤器</h1><p>　　写在模板中，属于Django模板语言<br>　　可以修改模板中的变量，从而显示不同的内容<br>　　使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filter&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;list_nums | length&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>　　过滤器可叠加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filter1 | filter2 | ...&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>　　修改edit_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'blog:edit_action' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.id | default:'0'&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.title&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.content&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h1><p>　　Python交互式命令行程序，自动引入了项目环境，可使用它与项目进行交互<br>　　使用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Article</span><br><span class="line">Article.objects.all()</span><br></pre></td></tr></table></figure></p><p>　　可以使用它进行调试<br>　　测试未知的方法</p><h1 id="Admin增强"><a href="#Admin增强" class="headerlink" title="Admin增强"></a>Admin增强</h1><h2 id="创建admin配置类"><a href="#创建admin配置类" class="headerlink" title="创建admin配置类"></a>创建admin配置类</h2><p>　　class ArticleAdmin(admin.ModelAdmin)<br>　　注册：admin.site.register(Article, ArticleAdmin)</p><h2 id="显示其他字段"><a href="#显示其他字段" class="headerlink" title="显示其他字段"></a>显示其他字段</h2><p>　　list_display = (‘title’, ‘content’)<br>　　list_display同时支持tuple和list</p><p>　　修改admin.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'content'</span>,<span class="string">'pub_time'</span>)</span><br><span class="line"></span><br><span class="line">admin.site.register(Article, ArticleAdmin)</span><br></pre></td></tr></table></figure></p><p>　　修改models.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, default=<span class="string">'Title'</span>)</span><br><span class="line">    content=models.TextField(null=<span class="keyword">True</span>)</span><br><span class="line">    pub_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure></p><p>　　如果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pub_time = models.DateTimeField(null=True)</span><br></pre></td></tr></table></figure></p><p>　　则可自己设定时间。</p><p>　　修改完代码记得进行数据移植<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>　　list_filter = (‘pub_time’,)<br>　　注意有个逗号</p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://docs.djangoproject.com/en/2.1/ref/" target="_blank" rel="noopener">Django API Reference</a></p><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="https://github.com/hubojing/django-blog-demo" target="_blank" rel="noopener">django-blog-demo</a></p><hr><p>hexo天坑：<br>遇到 两个大括号 以及 一个大括号一个% 一定放入代码行（如下），<code>这样是不行的</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br><span class="line">&#123;%%&#125;</span><br></pre></td></tr></table></figure></p><p>排查这个bug花了我半个小时…</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547395242880&amp;di=51c657b409cc95bb168dde1d33880538&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171129%2F35c49523c50843f3ba22b8bc246c5d42.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;Django-blog-demo笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Python" scheme="https://hubojing.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://hubojing.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>新年Flag</title>
    <link href="https://hubojing.github.io/2019/01/01/%E6%96%B0%E5%B9%B4Flag/"/>
    <id>https://hubojing.github.io/2019/01/01/新年Flag/</id>
    <published>2019-01-01T14:18:16.000Z</published>
    <updated>2019-01-06T10:05:28.615Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546778719714&di=dc8a0026620328217ea579b8991c2354&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-673bcb24e3663cabbeb18216130e8d05_1200x500.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>简短地写一写今年的规划。</strong><br><br><br> </div><a id="more"></a><p>　　元旦快乐！</p><p>　　2019年刚刚开始，不过我总有一种2019已经结束的错觉……<br>　　去年元旦前夕洋洋洒洒写了不少，2018也有很多事情可写，但可能不是一篇两篇写得下的……</p><p>　　去年我只立了两条Flag：<br>　　1. 每日看足1小时技术类图书<br>　　2. 不要熬夜</p><p>　　验收：<br>　　第一条算自己基本做到了吧，不过手头还有一叠书没看，不少时候也是利用的碎片化时间阅读。<br>　　第二条2018年上半年没做到，下半年基本做到了。</p><p>　　今年的Flag：<br>　　1. 不要熬夜，加强锻炼<br>　　2. 技术方面基础和实战两头抓<br>　　3. 提高算法能力，首先从多做题开始<br>　　4. 继续提高英语水平，尤其是计算机英语<br>　　5. 研究方向的趋向性研讨</p><p>　　2019年理应是一个自我技术能力快速提高的一年。</p><p>　　之前有朋友提醒我更博，Thanks♪(･ω･)ﾉ。2018年是忙碌的一年，其实也并非从八月起就停更了。只是那段时间折腾，开了一个微信公众号：玩代码，并且打算在上面更完关于OpenCV学习的一个系列笔记。这个系列可能文章比较多，但每篇篇幅较短，质量也可能参差不齐，因为主要是我进行自我查阅和复习使用。我之前没有和任何人提及过该公众号，只是在github上提交了部分代码。感谢各位默默关注。<br>　　可以说，公众号目前只是一个我折腾的玩具，技术博客依然是我的主要记录地。不过后期也许在公众号写点技术方面别的东西（比如一些日常写代码的bug或者计算机相关的新闻感想？）技术公众号和技术博客的分界点在哪，还没想好。<br>　　不过公众号借助微信的开发平台，很多方面省事省力。贴图也不用担心哪天图就挂了。我前几年写的文章不少配图失效了，而我当时也没有备份，算是找不到了。最初用极简图床丢了一波图，后来用七牛扣了一波钱，现在用VSCode写markdown，图床外链也不能实时显示。现在写文章怕丢图还得自我先备份，着实有些麻烦。关于这方面，还是得想想有没有什么好办法。</p><p>　　感觉没图太单调<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E6%96%B0%E5%B9%B4Flag%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%9F%A5%E4%B9%8E.jpg?raw=true" alt="2018我的知乎" title="">                </div>                <div class="image-caption">2018我的知乎</div>            </figure><br>　　跟上时代，未来必是人工智能的世界。</p><p>　　2019，扬帆起航吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546778719714&amp;di=dc8a0026620328217ea579b8991c2354&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-673bcb24e3663cabbeb18216130e8d05_1200x500.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;简短地写一写今年的规划。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://hubojing.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://hubojing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>linux C语言结构体</title>
    <link href="https://hubojing.github.io/2018/07/21/linux%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>https://hubojing.github.io/2018/07/21/linux C语言结构体/</id>
    <published>2018-07-21T15:42:23.000Z</published>
    <updated>2018-07-22T15:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532916110&di=4947d07d2456caefff7ea9ef09ce4c65&imgtype=jpg&er=1&src=http%3A%2F%2Fimg2.mukewang.com%2F5567d48300010ba306000338.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>再学C语言，复习&amp;笔记。</strong><br><br><br> </div><a id="more"></a><p>系列顺序：<br><a href="https://hubojing.github.io/2018/07/17/Linux%20C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/">Linux C语言编程基本原理与实践</a><br><a href="https://hubojing.github.io/2018/07/20/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98/">Linux C语言指针与内存</a><br><a href="https://hubojing.github.io/2018/07/21/linux%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93/">Linux C语言结构体</a></p><p>更多Linux知识：<br><a href="https://hubojing.github.io/2016/12/26/linux%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/">一天一点linux</a></p><hr><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>编译的四个步骤：.c文件—&gt;.i文件（预处理）-&gt;.s文件（编译）-&gt;.o文件（汇编）-&gt;可执行文件（链接）</p><p>gcc -o helloWorld.i helloWorld.c -E<br>-E表示只让helloWorld.c进行预处理</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>结构体对象所占的空间大小涉及到一个字节对齐的问题。字节对齐的目的是让计算机快速读写，是一个以空间换取时间的方式。<br>结构体对象的大小 = 最后一个成员的偏移量 + 最后一个成员变量的大小 + 填充字节<br>结构体字节对齐准则：当前成员的偏移量必须是成员变量大小的整数倍，不是的话在后面填充字节。<br>最后还要判断结构体大小是不是成员中最大成员类型的整数倍，不是的话还需填充。</p><p>例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>a 4字节，b 1字节，c 4字节<br>计算方法：</p><ol><li>a的长度为4，为b的长度1的整数倍，故b的偏移量4字节。</li><li>b的偏移量+b的长度=5字节，但5不能整除c的长度（4字节），故需填充偏移量到8字节。所以c的偏移量为8。</li><li>c的偏移量+c的长度=8+4=12字节，且12字节是最大成员类型（4字节）的整数倍，故结构体所占空间为12字节。</li></ol><p><strong>注：C语言结构体和C++结构体定义的区别</strong></p><ol><li>C结构体中只能自定义数据类型，不允许有函数。C++结构体可以加入成员函数，且允许该函数是虚函数。所以C结构体没有构造函数、析构函数和this指针。</li><li>C结构体对内部成员变量的访问权限<strong>只能</strong>是public，C++结构体<strong>默认</strong>是public，可以是public,protected,private三种。</li><li>C结构体不可继承，C++结构体可以从其它结构体或类继承。<br>以上是表面区别，实际区别是面向过程和面向对象编程思路的区别：C的结构体只是把数据变量给包裹起来了，并不涉及算法。C++是把数据变量及对这些数据变量的相关算法给封装起来，并且给对这些数据和类不同的访问权限。<br>C语言中没有类的概念，但可通过结构体内创建函数指针实现面向对象思想。</li><li>声明定义有区别：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> atk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>C语言用struct weapon a;<br>C++可以直接 weapon a;</p><p>若C也希望直接声明，则需引入typedef，定义为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> atk;</span><br><span class="line">&#125;Wea;</span><br></pre></td></tr></table></figure></p><p>Wea a;</p><h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><p>共用体的作用就使不同的类型的变量共享同一个地址，好处是节省开销，缺点是同一时刻仅仅能存储一个成员。<br>共用体的大小是所有成员中占内存最长的长度，初始化时只能有一个常量。</p><h1 id="动态数据结构"><a href="#动态数据结构" class="headerlink" title="动态数据结构"></a>动态数据结构</h1><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>每一个结点都是在程序中定义的而不是临时开辟的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> price;</span><br><span class="line">  <span class="keyword">int</span> atk;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> \*<span class="title">next</span>;</span> <span class="comment">//指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,\*<span class="title">head</span>;</span></span><br><span class="line">a.price = <span class="number">100</span>;</span><br><span class="line">a.atk = <span class="number">100</span>;</span><br><span class="line">b.price = <span class="number">200</span>;</span><br><span class="line">b.atk = <span class="number">200</span>;</span><br><span class="line">c.price = <span class="number">300</span>;</span><br><span class="line">c.atk = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">head = &amp;a;</span><br><span class="line">a.next = &amp;b;</span><br><span class="line">b.next = &amp;c;</span><br><span class="line">c.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> \*<span class="title">p</span>;</span></span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, %d\n"</span>, p-&gt;atk, p-&gt;price);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="动态链表"><a href="#动态链表" class="headerlink" title="动态链表"></a>动态链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> price;</span><br><span class="line">  <span class="keyword">int</span> atk;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> \*<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct weapon * <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> * <span class="title">head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> * <span class="title">p1</span>, *<span class="title">p2</span>;</span><span class="comment">//p1当前结点，p2上一个结点</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">//记录链表长度</span></span><br><span class="line">    p1 = p2 = (struct weapon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct weapon));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;p1-&gt;price,&amp;p1-&gt;atk);</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;price!=<span class="number">0</span>)<span class="comment">//约定价格为0时停止输入</span></span><br><span class="line">    &#123;</span><br><span class="line">    n++;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        head = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        p2-&gt;next = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        p2 = p1;</span><br><span class="line">        p1 = (struct weapon*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct weapon));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;p1-&gt;price, &amp;p1-&gt;atk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">weapon</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = create();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d"</span>,p-&gt;price,p-&gt;atk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>更多数据结构知识请参阅《数据结构（C语言版）》。</p><h1 id="递归与递推"><a href="#递归与递推" class="headerlink" title="递归与递推"></a>递归与递推</h1><p>递归：将一个问题规模为n的问题降为规模为(n-1)的问题，然后依次降低规模（层层往下），直至问题得到低规模的解，之后依次带入高规模的问题中（层层往上），最终得到规模为n解。从n -&gt; 1 -&gt; n。<br>递推：先构造解决一个低的规模问题，然后依次（层层往上）推导出高规模的问题解。<br>从1 -&gt; n。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532916110&amp;di=4947d07d2456caefff7ea9ef09ce4c65&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fimg2.mukewang.com%2F5567d48300010ba306000338.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;再学C语言，复习&amp;amp;笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Linux" scheme="https://hubojing.github.io/tags/Linux/"/>
    
      <category term="C" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux C语言指针与内存</title>
    <link href="https://hubojing.github.io/2018/07/20/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98/"/>
    <id>https://hubojing.github.io/2018/07/20/Linux C语言指针与内存/</id>
    <published>2018-07-20T15:31:33.000Z</published>
    <updated>2018-07-22T15:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532192612472&di=54237945ef2418e1a659ba5a4db2ba1d&imgtype=0&src=http%3A%2F%2Fimg.mukewang.com%2F5707624d0001423906000338-590-330.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>再学C语言，复习&amp;笔记。</strong><br><br><br> </div><a id="more"></a><p>系列顺序：<br><a href="https://hubojing.github.io/2018/07/17/Linux%20C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/">Linux C语言编程基本原理与实践</a><br><a href="https://hubojing.github.io/2018/07/20/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98/">Linux C语言指针与内存</a><br><a href="https://hubojing.github.io/2018/07/21/linux%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93/">Linux C语言结构体</a></p><p>更多Linux知识：<br><a href="https://hubojing.github.io/2016/12/26/linux%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/">一天一点linux</a></p><hr><h1 id="gdb调试工具的使用"><a href="#gdb调试工具的使用" class="headerlink" title="gdb调试工具的使用"></a>gdb调试工具的使用</h1><p><code>gdb -help</code> 查看gdb用法<br>gcc -g main.c -o main.out 编译命令<br>gdb ./main.out 调试命令<br><code>l</code> （list）列出代码（按回车显示全部）<br><code>break + 行号</code>    打断点<br><code>start</code> 开始单步调试<br><code>n</code>   执行下一行<br><code>p a</code> 打印a变量在内存中的情况<br><code>s</code> 进入调用函数内部<br><code>bt</code> 查看函数堆栈<br><code>f 1</code> 表示切换函数栈(切换到编号为1的函数)<br><code>q</code> 退出调试</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>main.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    change(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d\n, b = %d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main2.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    change(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d\n, b = %d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调试main2.c：<br><a href="调试main2.c">https://github.com/hubojing/BlogImages/blob/master/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E2%80%94%E2%80%94%E8%B0%83%E8%AF%95main2.c.png?raw=true</a></p><p>注意change函数传入的是a=5,b=3这两个数值。</p><p>调试main.c:<br><a href="调试main.c">https://github.com/hubojing/BlogImages/blob/master/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E2%80%94%E2%80%94%E8%B0%83%E8%AF%95main.c.png?raw=true</a></p><p>注意change函数传入的是两个地址。</p><h1 id="指针与内存"><a href="#指针与内存" class="headerlink" title="指针与内存"></a>指针与内存</h1><p>32位主机——32位总线（2^32个字节）最多只能放4G内存条。<br>2^10*2^10*2^10^2^2<br>=1024*1024*1024*4字节<br>=1024*1024*4K<br>=1024*4M<br>=4G</p><p>2^30=G<br>2^40=T</p><hr><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p> 系统内核（48位以上）<br> 栈（暂时存储首先执行的程序状态）<br> 自由可分配内存（可动态分配内存）<br> 堆<br> 数据段（声明一些全局变量或者声明一些常量）<br> 代码段（程序源代码编译后存放在此）</p><hr><p> C语言语法是不允许直接操作代码段的。<br> 函数调用信息保存在栈(stack)中。</p><p> 变量的本质是什么？<br> 变量名它只是一个代号，变量的本质就是内存。<br> 指针保存的是什么？<br> 指针保存的就是内存地址。</p><p> int *pa=&amp;a<br> 指将a的地址传给pa。<br> p pa看到的是a的地址（&amp;a）。<br>p &amp;pa才能看到pa本身的地址。</p><p>GCC会对内存变量分配进行优化：同一种变量类型会放到一块儿。<br>静态变量、常量、全局变量存于内存的数据段（数据段位置高于代码段）。<br>栈区域（最接近系统控制的内存空间）保存的是函数的运行状态：函数执行到哪一个命令？每一个变量保存的什么值？等等。</p><p>地址分配：代码,数据段是从下往上分配(先低地址，后高地址)，即：先声明的函数地址小，后声明的函数地址大；栈是从上往下分配(先高地址，后低地址)</p><p>函数中静态变量、局部变量区别:<br>局部变量在栈(相对数据段而言的高地址)中，而静态变量在数据段(低地址)中。<br>所以在多次调用函数时，静态变量不会被重新初始化。或者这么说，静态变量的生存周期和数据段相同，局部变量生存时间受调用函数时，所属函数进栈出栈的影响而会重新初始化。<br>全局变量和静态变量都在数据段中，但静态变量是某个函数特有的。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针格式：<br>返回值类型 (*变量名)(形参列表);<br>p pa指找到数据的内存地址（a的地址）；<br>p *pa指找到pa中的数据；<br>p &amp;pa指找到pa本身的地址。<br>quadrate在代码段时，<br>p quadrate 函数的内存地址(quadrate )<br>p *quadrate 在地址前加*，表示通过地址取值<br> int quadrate(int a);是一个函数<br>int （*pquadrate)(int a)=&quadrate;则是指向这个函数的指针<br>int s=(*pquadrate)(a)可以调用函数</p><h1 id="字符串与数组"><a href="#字符串与数组" class="headerlink" title="字符串与数组"></a>字符串与数组</h1><p>x/3d 地址    gdb调试打印内存：x代表打印，3代表打印长度，d代表十进制输出<br>例： x/3d 0x7fffffffde14<br>x/6cb   c:字符形式 :b byte为单位</p><p>数组是指针常量，指针是指针变量。<br>数组当作内存地址输入的话，可以直接当作参数传进去，不用加&amp;取址符。</p><p>栈内存中，gcc编译会作内存优化：</p><ol><li>使同一数据结构的变量在一起；</li><li>先定义的变量内存地址会小于后定义的；</li><li>只有堆内存和栈内存可以写入数据，代码段的内存编译以后无法修改。<br>例：<br>char *str=”world”;<br>scanf(“%s”, str);<br>将报错。因为”world”是一个常量，在代码段中，不可更改。<br>char str[]=”hello”;<br>scanf(“%s”, str);<br>正确。str在栈或堆中，可修改。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532192612472&amp;di=54237945ef2418e1a659ba5a4db2ba1d&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mukewang.com%2F5707624d0001423906000338-590-330.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;再学C语言，复习&amp;amp;笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Linux" scheme="https://hubojing.github.io/tags/Linux/"/>
    
      <category term="C" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux C语言编程基本原理与实践</title>
    <link href="https://hubojing.github.io/2018/07/17/Linux%20C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>https://hubojing.github.io/2018/07/17/Linux C语言编程基本原理与实践/</id>
    <published>2018-07-17T14:10:51.000Z</published>
    <updated>2018-07-22T15:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1531846872888&di=911d449b8951faf6481a160bd65576ce&imgtype=0&src=http%3A%2F%2Fimg.mukewang.com%2F570762760001a1db06000338-590-330.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>再学C语言，复习&amp;笔记。</strong><br><br><br> </div><a id="more"></a><p>系列顺序：<br><a href="https://hubojing.github.io/2018/07/17/Linux%20C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/">Linux C语言编程基本原理与实践</a><br><a href="https://hubojing.github.io/2018/07/20/Linux%20C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98/">Linux C语言指针与内存</a><br><a href="https://hubojing.github.io/2018/07/21/linux%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93/">Linux C语言结构体</a></p><p>更多Linux知识：<br><a href="https://hubojing.github.io/2016/12/26/linux%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/">一天一点linux</a></p><hr><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p><code>sudo</code>管理员权限<br><code>sudo apt-get update</code> 更新资源（安装软件前最好先更新资源）<br><code>sudo apt-get install vim(软件名称)</code> 安装某软件<br><code>cd ~</code>   进入home目录<br><code>pwd</code>  显示当前目录路径<br><code>ls</code> 显示当前文件夹下所有文件夹及文件<br><code>ls -l</code> 进入当前目录的文件夹目录后查看当前文件夹包含的文件/文件夹的类型、创建时间、用户权限、用户和用户组<br>（最前面是“d”为文件夹；“-”为普通类型的文件）<br><code>touch + 文件名</code>  新建文件<br><code>rm + 文件名</code>     删除文件<br><code>mkdir + 目录名</code>  新建目录<br><code>vi(vim) + 文件名</code> 使用vim编辑文件<br><code>clear</code> 清洁屏幕<br><code>cc -v</code> 检查编译器<br><code>gcc -v</code> 检查编译器</p><p>VIM命令模式：<br><code>dd</code> 删除整行<br><code>i</code> 在光标前面插入<br><code>a</code> 在光标后面插入<br><code>x</code> 删除单个字符<br><code>Shift + a</code> 行尾插入<br><code>Shift + i</code> 行首插入<br><code>o</code> 下一行插入<br><code>Shift + o</code> 上行插入<br><code>:$</code> 跳到代码末尾</p><h1 id="第一个Linux-C程序"><a href="#第一个Linux-C程序" class="headerlink" title="第一个Linux C程序"></a>第一个Linux C程序</h1><p>编译文件：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc a.c</span><br></pre></td></tr></table></figure></p><p>会得到a.out<br>编译文件后查看文件权限：<br>rw-：可读、可写<br>rwx:可读、可写、可执行<br>三个rwx  1创建用户  2与创建用户在同一个用户组  3任意用户<br>运行文件：<br>“.” 当前路径<br>“./” 当前路径下的文件<br>执行文件：./a.out</p><h1 id="多文件操作"><a href="#多文件操作" class="headerlink" title="多文件操作"></a>多文件操作</h1><p><code>sp max.c</code>  新建max.c文件(窗口打开多个文件)<br><code>ctrl + w +下箭头</code> 跳转到下一个编辑框<br><code>ctrl + w +下箭头</code> 跳转到上一个编辑框<br><code>对应行数+d+d</code> 剪切光标下相应行数的程序<br>9dd（代码占九行，剪切代码）<br>按<code>p</code>粘贴在剪切板的程序<br><code>set nu</code> 打开行号<br><code>:wqa</code> 保存所有文件并退出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello.out  指定编译文件（-o 给编译后的文件重命名）</span><br><span class="line">cp a.c b.c  拷贝文件：将a.c拷贝到b.c</span><br><span class="line">cat a.c 查看源代码程序</span><br></pre></td></tr></table></figure></p><p>分开编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c 文件名.c -o 文件名.o</span><br></pre></td></tr></table></figure></p><p>函数可以先编译成.o文件，然后再和主文件一起编译成可执行文件。在源代码多的时候可以提高效率。<br>例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -c max.c -o max.o</span><br><span class="line">gcc max.o hello.c</span><br><span class="line">./a.out</span><br><span class="line">cp max.c min.c</span><br><span class="line">rm a.out</span><br><span class="line">gcc-c min.c -o min.o </span><br><span class="line">gcc gcc max.o min.o hello.c</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure></p><p>gcc编译流程分为4步：<br>预处理(Pre-Processing) －&gt; 编译(Compling) -&gt; 汇编(Assembling) -&gt; 连接(Linking)<br>预处理：处理#include、#define、#ifdef 等宏命令<br>编译：把预处理完的文件编译为汇编程序.s<br>汇编：把汇编程序.s编译为.o二进制文件<br>链接：把多个二进制文件.o集合（链接）成一个可执行文件</p><p>使用别人的静态库.o文件(机器码，无法查看原代码)可以创建.h文件，然后在源程序中#include&lt;文件名.h&gt;来引用。</p><p>hello.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"max.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"min.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">int</span> maxNum = max(a1, a2);</span><br><span class="line">    <span class="keyword">int</span> minNum = min(a1, a2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, maxNum, minNum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>max.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>min.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>max.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p><p>min.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p><h1 id="makeFile的编写与使用"><a href="#makeFile的编写与使用" class="headerlink" title="makeFile的编写与使用"></a>makeFile的编写与使用</h1><p>make工具可以将大型的开发项目分成若干个模块。<br>make工具可以很清晰和很快捷的编译和整理源文件。</p><p><code>rm *.o</code> 表示删除所有.o文件<br><code>make -v</code> 检查make版本<br>vi Makefile  编译修改过的部分<br>输出文件：源文件<br>一个tab gcc命令<br>从上到下逐层求精<br>eg:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello.out:max.o min.o hello.c</span><br><span class="line">        gcc max.o min.o hello -o hello.out</span><br><span class="line">max.o:max.c</span><br><span class="line">        gcc -c max.c</span><br><span class="line">min.o:min.c</span><br><span class="line">        gcc -c min.c</span><br></pre></td></tr></table></figure></p><p>最后用make命令执行</p><p>重复使用make时，中间生成过的文件不需要再生成，没有修改过的文件不用再编译，会直接跳过该段代码，所以更加节省编译时间。</p><p><code>gcc-c</code> 参数的意义：<br><code>-c</code> 参数是将源代码编译成“目标文件 .o”，不进行连接<br>后面多个目标文件可通过-o链接成可执行文件。<br>不使用这个参数时gcc会直接进行编译链接，生成可执行文件。</p><h1 id="main函数详解"><a href="#main函数详解" class="headerlink" title="main函数详解"></a>main函数详解</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># main函数的完整形式</span></span><br><span class="line"><span class="keyword">int</span> main（<span class="keyword">int</span> argc，<span class="keyword">char</span>* argv[]）</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc main.c -o main.out &amp;&amp; ./ main.out<br>echo \$?    执行成功则返回0</p><p>参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"argc is %d\n"</span>,argc);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;argv;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"argv[%d] is %s\n"</span>,i,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>./out.c -l -s asd qwe</p><p>输出为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argc is <span class="number">5</span></span><br><span class="line">argv[<span class="number">0</span>] is ./m3.out</span><br><span class="line">argv[<span class="number">1</span>] is -l</span><br><span class="line">argv[<span class="number">2</span>] is -a</span><br><span class="line">argv[<span class="number">3</span>] is asd</span><br><span class="line">argv[<span class="number">4</span>] is qwe</span><br></pre></td></tr></table></figure></p><h1 id="标准输入流输出流以及错误流"><a href="#标准输入流输出流以及错误流" class="headerlink" title="标准输入流输出流以及错误流"></a>标准输入流输出流以及错误流</h1><p>cio.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //标准输入输出</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stdin</span></span><br><span class="line"><span class="comment">stdout</span></span><br><span class="line"><span class="comment">stderr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>); <span class="comment">//输出功能由标准输出流完成，printf是系统封装后的</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a); <span class="comment">//标准输入流，错误流是系统出错的时候的</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input value is : %d\n"</span>, a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在输入a.out时，程序执行，系统给程序提供了一个进程，当程序启动时，系统也提供给程序一系列的指针。linux将所有的外设（摄像头，打印机等），都视为文件。当启动应用程序时候，会产生三个文件（stdin，stdout，stderr，即标准输入，输出，错误流）。<br>默认情况下，输入流就是键盘，stdout默认为显示器，可切换为网卡或者打印机。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input the value a:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"please input the value a:\n"</span>);</span><br></pre></td></tr></table></figure><p>因为stdout默认是显示器，上两句就是等价的，printf其实就是fprintf封装后得到的。<br>同理，scanf和fscanf等价：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%d"</span>, &amp;a);</span><br></pre></td></tr></table></figure></p><p>错误流：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"the value must &gt; 0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>通过返回值1和0,让程序知道出错了。再次编译cc cio.c -o a2.out，我们运行a2.out，输入2则正常执行，当输入-1，则有对应的提示，即错误流发挥作用。<br>其实Linux这个很大的系统，就是由这些类似的小工具完成的。当等于0是为正确，错的话为其他值。<br>标准的输入流，输出流，以及错误流还可以重定向。</p><p>Linux几乎可以用于任何领域，这里我们不得不提出linux的通道，管道起到了很重要的作用，不同应用程序之间要配合使用，就需要用到管道。<br>先说输入流，输出流和错误流的重定向机制：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input the int value i:\n"</span>); \\<span class="built_in">printf</span>其实对<span class="built_in">fprintf</span>的封装，是从标准输出流（即<span class="built_in">stdout</span>）来输出这个过程</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i); <span class="comment">//默认输入流是键盘</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input the int value j:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i+j=%d\n"</span>, i+j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cc main.c<br>得到a.out，运行a.out，我们分别输入3和5输入到终端。我们标准输出流是1，输出入是0。<br><code>&gt;&gt;</code> 标准输出流重新定向符<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./a.out <span class="number">1</span>&gt;&gt; a.txt   输出到a.txt（默认为<span class="number">1</span>，可不写<span class="number">1</span>）</span><br><span class="line">./a.out &gt;&gt; a.txt内容追加下方</span><br><span class="line">./a.out &gt; a.txt内容覆盖</span><br></pre></td></tr></table></figure></p><p>执行命令后，分别输入3回车后再输入5。再使用命令cat a.txt，可以看到已经输出到文件里的内容。<br>错误流重定向：1&gt;标准输出流重定向 2&gt;标准错误流重定向<br>./a.out 1&gt;t.txt 2&gt;f.txt 将正确的输出流重定向输出到t.txt，错误的输出流重定向输出到f.txt</p><p><code>&lt;&lt;</code> 标准输入流重新定向符<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out &lt; input.txt 将input.txt的内容作为输入流传递给程序a.out</span><br></pre></td></tr></table></figure></p><p>综合使用标准输出流、标准错误流、标准输入流<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out <span class="number">1</span>&gt;t.txt <span class="number">2</span>&gt;f.txt &lt;input.txt</span><br></pre></td></tr></table></figure></p><h1 id="管道原理及应用"><a href="#管道原理及应用" class="headerlink" title="管道原理及应用"></a>管道原理及应用</h1><p><code>ls /</code>    查看根目录<br><code>ls /etc/</code>    查看Linux默认配置目录<br><code>ls /etc/ | grep 关键字符</code>    将etc文件输出到一个管道<br><code>|</code>管道<br>eg. 要查找某个目录下有多少个文件名包含“ab”，可以写<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/ | grep ab</span><br></pre></td></tr></table></figure></p><p>将前一个程序输出流重定向到grep，通过管道得到需要的内容。<br>ps -e | grep ssh<br>ps查看当前的进程，当前操作系统是否开启ssh进程</p><h2 id="管道使用demo"><a href="#管道使用demo" class="headerlink" title="管道使用demo"></a>管道使用demo</h2><p>程序avg.c，求任意个数的平均值：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum, n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;sum, &amp;n);</span><br><span class="line">  <span class="keyword">float</span> v = sum / n;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"v = %f\n"</span>, v);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cc avg.c -o avg.out</p><p>再写一个统计输入的程序input.c：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>==i)&#123; </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">    sum+=i;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,sum,count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cc input.c -o input.out<br>结合使用以上两个程序，将所有数据进行统计，执行input.out，之后通过管道经过avg.out计算平均值。<br>./input.out | ./avg.out<br>以上就是通过管道，将两个小程序连接起来得到更复杂的程序的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531846872888&amp;di=911d449b8951faf6481a160bd65576ce&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mukewang.com%2F570762760001a1db06000338-590-330.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;再学C语言，复习&amp;amp;笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Linux" scheme="https://hubojing.github.io/tags/Linux/"/>
    
      <category term="C" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Looking up at the starry sky</title>
    <link href="https://hubojing.github.io/2018/06/03/letter/"/>
    <id>https://hubojing.github.io/2018/06/03/letter/</id>
    <published>2018-06-03T15:20:55.000Z</published>
    <updated>2018-06-26T13:12:23.643Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter password</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Just a life test.[测试一下博文带密码]
    
    </summary>
    
      <category term="杂谈" scheme="https://hubojing.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://hubojing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>读取24位bmp像素数据（带透明通道）</title>
    <link href="https://hubojing.github.io/2018/05/26/%E8%AF%BB%E5%8F%9624%E4%BD%8Dbmp%E5%83%8F%E7%B4%A0%E6%95%B0%E6%8D%AE%EF%BC%88%E5%B8%A6%E9%80%8F%E6%98%8E%E9%80%9A%E9%81%93%EF%BC%89/"/>
    <id>https://hubojing.github.io/2018/05/26/读取24位bmp像素数据（带透明通道）/</id>
    <published>2018-05-26T02:21:38.000Z</published>
    <updated>2018-05-28T11:34:05.792Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1526924327173&di=b20d0c60e8cde64ff85f51171d6ce16e&imgtype=0&src=http%3A%2F%2Fs6.51cto.com%2Fwyfs02%2FM01%2F73%2FCF%2FwKiom1YInRjCxIlAAAA5HZX_kU4372.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>一种读取24位bitmap资源的全部像素数据（加透明通道）的方法。</strong><br><br><br> </div><a id="more"></a><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p>BMP文件的数据按照从文件头开始的先后顺序分为四个部分：<br>◆ 位图文件头(bmp file header)：  提供文件的格式、大小等信息<br>◆ 位图信息头(bitmap information)：提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息<br>◆ 调色板(color palette)：可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表<br>◆ 位图数据(bitmap data)：图像数据区<br>24位和32位不需要调色板。</p><h1 id="提取像素原理"><a href="#提取像素原理" class="headerlink" title="提取像素原理"></a>提取像素原理</h1><p>24位，除去位图信息头后的剩余部分就是所需的像素信息。需注意的是，它的像素数据按照<strong>BGR排列</strong>，且数据从位图左下方开始，从左到右，<strong>从下到上</strong>存储。并且24位位图是没有透明通道的。</p><p>但我需要将其转换为RGB排列，且从上到下读取数据。另外我需要能显示透明色，也就是说，将24位位图转换为32位位图，即读取数据时增加一个透明通道（设置为0则透明）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>以下是我写的实现该功能的粗糙代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BYTE* <span class="title">GetImageData</span><span class="params">(CBitmap* cBitmap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BITMAP bmp;</span><br><span class="line">    cBitmap-&gt;GetBitmap(&amp;bmp);</span><br><span class="line">    HBITMAP hbm = (HBITMAP)*cBitmap;</span><br><span class="line">    </span><br><span class="line">    HDC hDC = ::GetDC(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    LONG width = bmp.bmWidth * <span class="number">4</span>;</span><br><span class="line">    LONG height = bmp.bmHeight;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义位图信息</span></span><br><span class="line">    BITMAPINFO bi;</span><br><span class="line">    bi.bmiHeader.biSize = <span class="keyword">sizeof</span>(bi.bmiHeader);</span><br><span class="line">    bi.bmiHeader.biWidth = bmp.bmWidth;</span><br><span class="line">    bi.bmiHeader.biHeight = bmp.bmHeight;</span><br><span class="line">    bi.bmiHeader.biPlanes = <span class="number">1</span>;</span><br><span class="line">    bi.bmiHeader.biBitCount = <span class="number">32</span>;</span><br><span class="line">    bi.bmiHeader.biCompression = BI_RGB;</span><br><span class="line">    bi.bmiHeader.biSizeImage = width * height;</span><br><span class="line">    bi.bmiHeader.biClrUsed = <span class="number">0</span>;</span><br><span class="line">    bi.bmiHeader.biImportant = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取位图数据</span></span><br><span class="line">    BYTE* lpvBits = <span class="keyword">new</span> BYTE[width * height];</span><br><span class="line">    ::ZeroMemory(lpvBits, width * height);</span><br><span class="line">    ::GetDC(<span class="literal">NULL</span>);</span><br><span class="line">    ::GetDIBits(hDC, hbm, <span class="number">0</span>, height, lpvBits, &amp;bi, DIB_RGB_COLORS);</span><br><span class="line">    </span><br><span class="line">    BYTE buffer = <span class="number">0</span>;</span><br><span class="line">    BYTE* pData=<span class="keyword">new</span> BYTE[width * height];</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= height - <span class="number">1</span>;i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j &lt; width; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            BYTE tempBR = <span class="number">0</span>;</span><br><span class="line">                tempBR = lpvBits[width * i + j];<span class="comment">//b赋给temp</span></span><br><span class="line">                lpvBits[width * i + j] = lpvBits[width * i + j + <span class="number">2</span>];<span class="comment">//r赋给b</span></span><br><span class="line">                lpvBits[width * i + j + <span class="number">2</span>] = tempBR;<span class="comment">//temp赋给r</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">3</span>)<span class="comment">//透明通道</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(lpvBits[width * i + j - <span class="number">3</span>] == <span class="number">255</span> &amp;&amp; lpvBits[width * i + j - <span class="number">2</span>] == <span class="number">255</span> &amp;&amp; lpvBits[width * i + j - <span class="number">1</span>] == <span class="number">255</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                lpvBits[width * i + j] == <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                lpvBits[width * i + j] == <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer = lpvBits[width * i + j];</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;pData[temp++], &amp;buffer, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(lpvBits != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">delete</span> lpvBits;</span><br><span class="line">        lpvBits = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ::ReleaseDC(<span class="literal">NULL</span>, hDC);</span><br><span class="line">    </span><br><span class="line">DeleteObject(cBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1526924327173&amp;di=b20d0c60e8cde64ff85f51171d6ce16e&amp;imgtype=0&amp;src=http%3A%2F%2Fs6.51cto.com%2Fwyfs02%2FM01%2F73%2FCF%2FwKiom1YInRjCxIlAAAA5HZX_kU4372.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;一种读取24位bitmap资源的全部像素数据（加透明通道）的方法。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>bmp保存和imagelist读取</title>
    <link href="https://hubojing.github.io/2018/05/21/bmp%E4%BF%9D%E5%AD%98%E5%92%8Cimagelist%E8%AF%BB%E5%8F%96/"/>
    <id>https://hubojing.github.io/2018/05/21/bmp保存和imagelist读取/</id>
    <published>2018-05-21T14:46:06.000Z</published>
    <updated>2018-05-21T14:53:51.012Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1526924327173&di=b20d0c60e8cde64ff85f51171d6ce16e&imgtype=0&src=http%3A%2F%2Fs6.51cto.com%2Fwyfs02%2FM01%2F73%2FCF%2FwKiom1YInRjCxIlAAAA5HZX_kU4372.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>代码整理。</strong><br><br><br> </div><a id="more"></a><h1 id="bmp保存"><a href="#bmp保存" class="headerlink" title="bmp保存"></a>bmp保存</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SaveBitmapToFile</span><span class="params">(CBitmap* bitmap, LPSTR lpFileName)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;              </span><br><span class="line">    HBITMAP hBitmap;    <span class="comment">// 为刚才的屏幕位图句柄  </span></span><br><span class="line">    HDC hDC; <span class="comment">//设备描述表    </span></span><br><span class="line">    <span class="keyword">int</span> iBits; <span class="comment">//当前显示分辨率下每个像素所占字节数    </span></span><br><span class="line">    WORD wBitCount; <span class="comment">//位图中每个像素所占字节数    </span></span><br><span class="line">    DWORD dwPaletteSize = <span class="number">0</span>, <span class="comment">//定义调色板大小  </span></span><br><span class="line">        dwBmBitsSize,  <span class="comment">//位图中像素字节大小     </span></span><br><span class="line">        dwDIBSize,   <span class="comment">//位图文件大小  </span></span><br><span class="line">        dwWritten;  <span class="comment">//写入文件字节数  </span></span><br><span class="line">    BITMAP Bitmap; <span class="comment">//位图属性结构    </span></span><br><span class="line">    BITMAPFILEHEADER bmfHdr; <span class="comment">//位图文件头结构    </span></span><br><span class="line">    BITMAPINFOHEADER bi; <span class="comment">//位图信息头结构      </span></span><br><span class="line">    LPBITMAPINFOHEADER lpbi; <span class="comment">//指向位图信息头结构    </span></span><br><span class="line">    HANDLE fh,   <span class="comment">//定义文件  </span></span><br><span class="line">        hDib,    <span class="comment">//分配内存句柄  </span></span><br><span class="line">        hPal,   <span class="comment">//调色板句柄  </span></span><br><span class="line">        hOldPal = <span class="literal">NULL</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//计算位图文件每个像素所占字节数    </span></span><br><span class="line">    hBitmap = (HBITMAP)*bitmap;    </span><br><span class="line">    hDC = CreateDC(<span class="string">"DISPLAY"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);    </span><br><span class="line">    iBits = GetDeviceCaps(hDC, BITSPIXEL) * GetDeviceCaps(hDC, PLANES);    </span><br><span class="line">    DeleteDC(hDC);  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (iBits &lt;= <span class="number">1</span>)    </span><br><span class="line">        wBitCount = <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iBits &lt;= <span class="number">4</span>)    </span><br><span class="line">        wBitCount = <span class="number">4</span>;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iBits &lt;= <span class="number">8</span>)    </span><br><span class="line">        wBitCount = <span class="number">8</span>;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iBits &lt;= <span class="number">24</span>)    </span><br><span class="line">        wBitCount = <span class="number">24</span>;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iBits &lt;= <span class="number">32</span>)  </span><br><span class="line">        wBitCount = <span class="number">32</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//计算调色板大小    </span></span><br><span class="line">    <span class="keyword">if</span> (wBitCount &lt;= <span class="number">8</span>)    </span><br><span class="line">        dwPaletteSize = (<span class="number">1</span> &lt;&lt; wBitCount) * <span class="keyword">sizeof</span> (RGBQUAD);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//设置位图信息头结构    </span></span><br><span class="line">    GetObject(hBitmap, <span class="keyword">sizeof</span> (BITMAP), (LPSTR)&amp;Bitmap);  </span><br><span class="line">    bi.biSize = <span class="keyword">sizeof</span> (BITMAPINFOHEADER);    </span><br><span class="line">    bi.biWidth = Bitmap.bmWidth;    </span><br><span class="line">    bi.biHeight = Bitmap.bmHeight;    </span><br><span class="line">    bi.biPlanes = <span class="number">1</span>;      </span><br><span class="line">    bi.biBitCount = wBitCount;    </span><br><span class="line">    bi.biCompression = BI_RGB;    </span><br><span class="line">    bi.biSizeImage = <span class="number">0</span>;    </span><br><span class="line">    bi.biXPelsPerMeter = <span class="number">0</span>;    </span><br><span class="line">    bi.biYPelsPerMeter = <span class="number">0</span>;    </span><br><span class="line">    bi.biClrUsed = <span class="number">0</span>;    </span><br><span class="line">    bi.biClrImportant = <span class="number">0</span>;    </span><br><span class="line">      </span><br><span class="line">    dwBmBitsSize = ((Bitmap.bmWidth * wBitCount+<span class="number">31</span>) / <span class="number">32</span>) * <span class="number">4</span> * Bitmap.bmHeight;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//为位图内容分配内存    </span></span><br><span class="line">    hDib = GlobalAlloc(GHND, dwBmBitsSize + dwPaletteSize + <span class="keyword">sizeof</span> (BITMAPINFOHEADER));    </span><br><span class="line">    lpbi = (LPBITMAPINFOHEADER)GlobalLock(hDib);    </span><br><span class="line">    *lpbi = bi;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 处理调色板         </span></span><br><span class="line">    hPal = GetStockObject(DEFAULT_PALETTE);    </span><br><span class="line">    <span class="keyword">if</span> (hPal)    </span><br><span class="line">    &#123;    </span><br><span class="line">        hDC = ::GetDC(<span class="literal">NULL</span>);      </span><br><span class="line">        hOldPal = ::SelectPalette(hDC, (HPALETTE)hPal, FALSE);    </span><br><span class="line">        RealizePalette(hDC);  </span><br><span class="line">    &#125;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//   获取该调色板下新的像素值    </span></span><br><span class="line">    GetDIBits(hDC, hBitmap, <span class="number">0</span>, (UINT) Bitmap.bmHeight,    </span><br><span class="line">        (LPSTR)lpbi + <span class="keyword">sizeof</span> (BITMAPINFOHEADER) + dwPaletteSize,  </span><br><span class="line">        (LPBITMAPINFO)lpbi, DIB_RGB_COLORS);    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//恢复调色板       </span></span><br><span class="line">    <span class="keyword">if</span> (hOldPal)      </span><br><span class="line">    &#123;    </span><br><span class="line">        SelectPalette(hDC, (HPALETTE)hOldPal, TRUE);    </span><br><span class="line">        RealizePalette(hDC);    </span><br><span class="line">        ::ReleaseDC(<span class="literal">NULL</span>, hDC);  </span><br><span class="line">    &#125;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建位图文件              </span></span><br><span class="line">    fh = CreateFile(lpFileName, GENERIC_WRITE,  </span><br><span class="line">        <span class="number">0</span>, <span class="literal">NULL</span>, CREATE_ALWAYS,  </span><br><span class="line">        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, <span class="literal">NULL</span>);    </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (fh == INVALID_HANDLE_VALUE)  </span><br><span class="line">        <span class="keyword">return</span> FALSE;    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//   设置位图文件头    </span></span><br><span class="line">    bmfHdr.bfType = <span class="number">0x4D42</span>;     <span class="comment">//   "BM"    </span></span><br><span class="line">    dwDIBSize = <span class="keyword">sizeof</span> (BITMAPFILEHEADER)       </span><br><span class="line">        + <span class="keyword">sizeof</span> (BITMAPINFOHEADER)    </span><br><span class="line">        + dwPaletteSize + dwBmBitsSize;      </span><br><span class="line">    bmfHdr.bfSize = dwDIBSize;    </span><br><span class="line">    bmfHdr.bfReserved1 = <span class="number">0</span>;    </span><br><span class="line">    bmfHdr.bfReserved2 = <span class="number">0</span>;    </span><br><span class="line">    bmfHdr.bfOffBits = (DWORD)<span class="keyword">sizeof</span> (BITMAPFILEHEADER)     </span><br><span class="line">        + (DWORD)<span class="keyword">sizeof</span> (BITMAPINFOHEADER)    </span><br><span class="line">        + dwPaletteSize;      </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//   写入位图文件头    </span></span><br><span class="line">    WriteFile(fh, (LPSTR)&amp;bmfHdr, <span class="keyword">sizeof</span>(BITMAPFILEHEADER), &amp;dwWritten, <span class="literal">NULL</span>);    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//   写入位图文件其余内容    </span></span><br><span class="line">    WriteFile(fh, (LPSTR)lpbi, dwDIBSize,  </span><br><span class="line">        &amp;dwWritten, <span class="literal">NULL</span>);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//清除            </span></span><br><span class="line">    GlobalUnlock(hDib);    </span><br><span class="line">    GlobalFree(hDib);    </span><br><span class="line">    CloseHandle(fh);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> TRUE;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：SaveBitmapToFile(cbm, “1.bmp”);  </p><h1 id="imagelist读取bmp"><a href="#imagelist读取bmp" class="headerlink" title="imagelist读取bmp"></a>imagelist读取bmp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetImage</span><span class="params">(CImageList&amp; imglist, CBitmap&amp; dist ,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CClientDC <span class="title">dc</span><span class="params">(<span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">IMAGEINFO ii;</span><br><span class="line">imglist.GetImageInfo(num, &amp;ii);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nWidth = ii.rcImage.right - ii.rcImage.left;</span><br><span class="line"><span class="keyword">int</span> nHeight = ii.rcImage.bottom - ii.rcImage.top;</span><br><span class="line"></span><br><span class="line">dist.CreateCompatibleBitmap(&amp;dc, nWidth, nHeight);</span><br><span class="line">CDC memDC;</span><br><span class="line">memDC.CreateCompatibleDC(&amp;dc);</span><br><span class="line">CBitmap* pOldBitmap = memDC.SelectObject(&amp;dist);</span><br><span class="line"></span><br><span class="line">memDC.FillSolidRect(<span class="number">0</span>, <span class="number">0</span>, nWidth, nHeight, </span><br><span class="line">RGB(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>) );</span><br><span class="line"></span><br><span class="line">imglist.Draw(&amp;memDC, num, CPoint(<span class="number">0</span>, <span class="number">0</span>), ILD_NORMAL);</span><br><span class="line"></span><br><span class="line">memDC.SelectObject(pOldBitmap);</span><br><span class="line"></span><br><span class="line">memDC.DeleteDC();</span><br><span class="line"></span><br><span class="line">::DeleteObject(ii.hbmImage);</span><br><span class="line">::DeleteObject(ii.hbmMask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码整理自互联网。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1526924327173&amp;di=b20d0c60e8cde64ff85f51171d6ce16e&amp;imgtype=0&amp;src=http%3A%2F%2Fs6.51cto.com%2Fwyfs02%2FM01%2F73%2FCF%2FwKiom1YInRjCxIlAAAA5HZX_kU4372.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;代码整理。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python开发简单爬虫</title>
    <link href="https://hubojing.github.io/2018/03/11/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
    <id>https://hubojing.github.io/2018/03/11/Python开发简单爬虫/</id>
    <published>2018-03-11T07:42:37.000Z</published>
    <updated>2018-03-12T15:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1520877147729&di=7931c89b81b24de8d540c04e40c7228a&imgtype=0&src=http%3A%2F%2Fserver.zzidc.com%2Fuploads%2Fallimg%2F171210%2F1-1G210204413632.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>人生苦短，Python当歌。</strong><br><br><br> </div><a id="more"></a><h1 id="简单爬虫架构"><a href="#简单爬虫架构" class="headerlink" title="简单爬虫架构"></a>简单爬虫架构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E6%9E%B6%E6%9E%84.png?raw=true" alt="简单爬虫架构" title="">                </div>                <div class="image-caption">简单爬虫架构</div>            </figure><p>简单爬虫架构——运行流程<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png?raw=true" alt="运行流程" title="">                </div>                <div class="image-caption">运行流程</div>            </figure></p><h1 id="URL管理器和实现方法"><a href="#URL管理器和实现方法" class="headerlink" title="URL管理器和实现方法"></a>URL管理器和实现方法</h1><ul><li>URL管理器：管理待抓取URL集合和已抓取URL集合<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94URL%E7%AE%A1%E7%90%86%E5%99%A8.png?raw=true" alt="URL管理器" title="">                </div>                <div class="image-caption">URL管理器</div>            </figure></li><li>实现方式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94URL%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.png?raw=true" alt="实现方式" title="">                </div>                <div class="image-caption">实现方式</div>            </figure></li></ul><h1 id="网页下载器和urllib2模块"><a href="#网页下载器和urllib2模块" class="headerlink" title="网页下载器和urllib2模块"></a>网页下载器和urllib2模块</h1><ul><li><p>网页下载器：将互联网上URL对应的网页下载到本地的工具</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E7%BD%91%E9%A1%B5%E4%B8%8B%E8%BD%BD%E5%99%A8.png?raw=true" alt="网页下载器" title="">                </div>                <div class="image-caption">网页下载器</div>            </figure></li><li><p>Python的几种网页下载器</p></li></ul><ol><li>urllib2——Python官方基础模块</li><li>requests——第三方包更强大</li></ol><h2 id="urllib2下载网页的三种方法"><a href="#urllib2下载网页的三种方法" class="headerlink" title="urllib2下载网页的三种方法"></a>urllib2下载网页的三种方法</h2><p>以下代码基于Python2。</p><h3 id="最简洁方法"><a href="#最简洁方法" class="headerlink" title="最简洁方法"></a>最简洁方法</h3><p>url—&gt;urllib2.urlopen(url)</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接请求</span></span><br><span class="line">response = urllib2.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取状态码，如果是200表示获取成功</span></span><br><span class="line"><span class="keyword">print</span> response.getcode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取内容</span></span><br><span class="line">cont = response.read()</span><br></pre></td></tr></table></figure><h3 id="法2：添加data、http-header"><a href="#法2：添加data、http-header" class="headerlink" title="法2：添加data、http header"></a>法2：添加data、http header</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94urllib2%E6%B3%952.png?raw=true" alt="urllib2法2" title="">                </div>                <div class="image-caption">urllib2法2</div>            </figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Request对象</span></span><br><span class="line">request = urllib2.Request(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加数据</span></span><br><span class="line">request.add_data(<span class="string">'a'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#添加http的header</span></span><br><span class="line">request.add_header(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求获取结果</span></span><br><span class="line">response = urllib2.urlopen(request)</span><br></pre></td></tr></table></figure><h3 id="法3：添加特殊情景的处理器"><a href="#法3：添加特殊情景的处理器" class="headerlink" title="法3：添加特殊情景的处理器"></a>法3：添加特殊情景的处理器</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94urllib2%E6%B3%953.png?raw=true" alt="urllib2法3" title="">                </div>                <div class="image-caption">urllib2法3</div>            </figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2, cookielib</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建cookie容器</span></span><br><span class="line">cj = cookielib.CookieJar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建1个opener</span></span><br><span class="line">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给urllib2安装opener</span></span><br><span class="line">urllib2.install_opener(opener)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用带有cookie的urllib2访问网页</span></span><br><span class="line">response = urllib2.urlopen(<span class="string">"http://www/baidu.com/"</span>)</span><br></pre></td></tr></table></figure><h1 id="Python3代码"><a href="#Python3代码" class="headerlink" title="Python3代码"></a>Python3代码</h1><p>Python版本：3.7<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'第一种方法'</span>)</span><br><span class="line">response1=request.urlopen(url)</span><br><span class="line">print(response1.getcode())</span><br><span class="line">print(len(response1.read()))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第二种方法'</span>)</span><br><span class="line">req=request.Request(url)</span><br><span class="line">req.add_header(<span class="string">'user-agent'</span>,<span class="string">'Mozilla/5.0'</span>)</span><br><span class="line">response2=request.urlopen(req)</span><br><span class="line">print(response2.getcode())</span><br><span class="line">print(len(response2.read()))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第三种方法'</span>)</span><br><span class="line">cj=http.cookiejar.CookieJar()</span><br><span class="line">opener=request.build_opener(request.HTTPCookieProcessor(cj))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">response3=request.urlopen(url)</span><br><span class="line">print(response3.getcode())</span><br><span class="line">print(cj)</span><br><span class="line">print(response3.read())</span><br></pre></td></tr></table></figure></p><p>注意：<strong>python3要使用urllib.request替换urllib2。</strong></p><h1 id="网页解析器和BeautifulSoup第三方模块"><a href="#网页解析器和BeautifulSoup第三方模块" class="headerlink" title="网页解析器和BeautifulSoup第三方模块"></a>网页解析器和BeautifulSoup第三方模块</h1><ul><li>网页解析器：从网页中提取有价值数据的工具<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90%E5%99%A8.png?raw=true" alt="网页解析器" title="">                </div>                <div class="image-caption">网页解析器</div>            </figure></li><li><p>Python的几种网页解析器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%87%A0%E7%A7%8D%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90%E5%99%A8.png?raw=true" alt="几种网页解析器" title="">                </div>                <div class="image-caption">几种网页解析器</div>            </figure></li><li><p>结构化解析-DOM(Document Object Model)树</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94DOM.png?raw=true" alt="DOM" title="">                </div>                <div class="image-caption">DOM</div>            </figure></li></ul><h2 id="Beautiful-Soup安装"><a href="#Beautiful-Soup安装" class="headerlink" title="Beautiful Soup安装"></a>Beautiful Soup安装</h2><p>官方文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><p>安装：pip install beautifulsoup4<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85beautifulsoup.png?raw=true" alt="安装" title="">                </div>                <div class="image-caption">安装</div>            </figure></p><p>pip install bs4<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85bs4.png?raw=true" alt="安装bs4" title="">                </div>                <div class="image-caption">安装bs4</div>            </figure></p><h2 id="Beautiful-Soup语法"><a href="#Beautiful-Soup语法" class="headerlink" title="Beautiful Soup语法"></a>Beautiful Soup语法</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94BS%E8%AF%AD%E6%B3%95.png?raw=true" alt="BS语法" title="">                </div>                <div class="image-caption">BS语法</div>            </figure><p>eg.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&apos;123.html&apos; class=&apos;article_link&apos;&gt; Python &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>节点名称：a<br>节点属性：href=’123.html’<br>节点属性：class=’article_link’<br>节点内容：Python</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><h3 id="创建BeautifulSoup对象"><a href="#创建BeautifulSoup对象" class="headerlink" title="创建BeautifulSoup对象"></a>创建BeautifulSoup对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据HTML网页字符串创建BeautifulSoup对象</span></span><br><span class="line">soup = BeautifulSoup(</span><br><span class="line">html_doc,<span class="comment"># HTML文档字符串</span></span><br><span class="line"><span class="string">'html.parser'</span><span class="comment"># HTML解析器</span></span><br><span class="line">from_encoding=<span class="string">'utf8'</span><span class="comment"># HTML文档的编码</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="搜索节点（find-all-find）"><a href="#搜索节点（find-all-find）" class="headerlink" title="搜索节点（find_all,find）"></a>搜索节点（find_all,find）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法：find_all(name, attrs, string)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有标签为a的节点</span></span><br><span class="line">soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有标签为a，链接符合/view/123.htm形式的节点</span></span><br><span class="line">soup.find_all(<span class="string">'a'</span>, href=<span class="string">'/view/123.htm'</span>)</span><br><span class="line">soup.find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">r'/view/\d+\.htm'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有标签为div，class为abc，文字为Python的节点</span></span><br><span class="line">soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'abc'</span>, string=<span class="string">'Python'</span>)</span><br></pre></td></tr></table></figure><h3 id="访问节点信息"><a href="#访问节点信息" class="headerlink" title="访问节点信息"></a>访问节点信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到节点：&lt;a href='1.html'&gt;Python&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取查找到的节点的标签名称</span></span><br><span class="line">node.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查找到的a节点的href属性</span></span><br><span class="line">node[<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查找到的a节点的链接文字</span></span><br><span class="line">node.get_text()</span><br></pre></td></tr></table></figure><h3 id="Python3测试"><a href="#Python3测试" class="headerlink" title="Python3测试"></a>Python3测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup=BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'获取所有的链接'</span>)</span><br><span class="line">links = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    print(link.name, link[<span class="string">'href'</span>], link.get_text())</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'获取lacie的链接'</span>)</span><br><span class="line">link_node = soup.find(<span class="string">'a'</span>, href=<span class="string">'http://example.com/lacie'</span>)</span><br><span class="line">print(link_node.name, link_node[<span class="string">'href'</span>], link_node.get_text())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'正则匹配'</span>)</span><br><span class="line">link_node = soup.find(<span class="string">'a'</span>, href=re.compile(<span class="string">r"ill"</span>))</span><br><span class="line">print(link_node.name, link_node[<span class="string">'href'</span>], link_node.get_text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'获取p段落文字'</span>)</span><br><span class="line">p_node = soup.find(<span class="string">'p'</span>, class_=<span class="string">"title"</span>)</span><br><span class="line">print(p_node.name, p_node.get_text())</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E7%BB%93%E6%9E%9C.png?raw=true" alt="结果" title="">                </div>                <div class="image-caption">结果</div>            </figure></p><h1 id="爬取百度百科1000个页面的数据"><a href="#爬取百度百科1000个页面的数据" class="headerlink" title="爬取百度百科1000个页面的数据"></a>爬取百度百科1000个页面的数据</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>确定目标—&gt;分析目标（URL格式、数据格式、网页编码）—&gt;编写代码—&gt;执行爬虫</p><blockquote><p>目标：百度百科Python词条相关词条网页——标题和简介</p></blockquote><blockquote><p>入口页：<a href="http://baike.baidu.com/item/Python/" target="_blank" rel="noopener">http://baike.baidu.com/item/Python/</a></p></blockquote><blockquote><p>URL格式：</p><ul><li>词条页面URL：/item/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6</li></ul></blockquote><blockquote><p>数据格式：</p><ul><li>标题：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dd class=&quot;lemmaWgt-lemmaTitle-title&quot;&gt;</span><br><span class="line">&lt;h1&gt;***&lt;/h1&gt;</span><br><span class="line">&lt;/dd&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>简介：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;lemma-summary&quot; label-module=&quot;lemmaSummary&quot;&gt;***&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>页面编码：UTF-8</p></blockquote><h2 id="易错处及解决"><a href="#易错处及解决" class="headerlink" title="易错处及解决"></a>易错处及解决</h2><ul><li>url易变，以后需结合最新url修改正则表达式或总入口url。</li><li><p>若只能爬取到一条数据，注意有些url是没有summary的，需添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">summary_node = soup.find(<span class="string">'div'</span>, class_=<span class="string">'lemma-summary'</span>)</span><br><span class="line"><span class="comment">#添加判空判断</span></span><br><span class="line"><span class="keyword">if</span> summary_node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure></li><li><p>outputer.html为空时，检查代码outputer代码是否有误。这种情况通常是data为空，可以断点调试一下，定位问题。比如我的问题在html_parser中<code>_get_new_data</code>函数中将<code>lemma-summary</code>写为了<code>lemmasummary</code>。</p></li><li>outputer.html乱码时，检查编码问题。Python3将编码写在open里。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fout = open(<span class="string">'output.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"> fout.write(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line"> fout.write(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line"> fout.write(<span class="string">"&lt;table&gt;"</span>)</span><br><span class="line"> <span class="keyword">for</span> data <span class="keyword">in</span> self.datas:</span><br><span class="line">     fout.write(<span class="string">"&lt;tr&gt;"</span>)</span><br><span class="line">     fout.write(<span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % data[<span class="string">'url'</span>])</span><br><span class="line">     fout.write(<span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % data[<span class="string">'title'</span>])</span><br><span class="line">     fout.write(<span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span> % data[<span class="string">'summary'</span>])</span><br><span class="line">     fout.write(<span class="string">"&lt;/tr&gt;"</span>)</span><br><span class="line"> fout.write(<span class="string">"&lt;/table&gt;"</span>)</span><br><span class="line"> fout.write(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line"> fout.write(<span class="string">"&lt;/html&gt;"</span>)</span><br><span class="line"> fout.close()</span><br></pre></td></tr></table></figure></li></ul><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><ul><li>经测试，爬1000个页面用时为12min（比较慢），全部爬取成功。</li><li>控制台</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%9C.png?raw=true" alt="爬虫数据" title="">                </div>                <div class="image-caption">爬虫数据</div>            </figure></li><li>输出的html</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94html.png?raw=true" alt="html" title="">                </div>                <div class="image-caption">html</div>            </figure></li></ul><h1 id="全部代码下载地址"><a href="#全部代码下载地址" class="headerlink" title="全部代码下载地址"></a>全部代码下载地址</h1><p><a href="https://github.com/hubojing/PythonSpider" target="_blank" rel="noopener">https://github.com/hubojing/PythonSpider</a></p><hr><p>感谢慕课平台。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1520877147729&amp;di=7931c89b81b24de8d540c04e40c7228a&amp;imgtype=0&amp;src=http%3A%2F%2Fserver.zzidc.com%2Fuploads%2Fallimg%2F171210%2F1-1G210204413632.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;人生苦短，Python当歌。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="爬虫" scheme="https://hubojing.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://hubojing.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学学习笔记</title>
    <link href="https://hubojing.github.io/2018/03/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2018/03/05/计算机图形学学习笔记/</id>
    <published>2018-03-05T13:55:05.000Z</published>
    <updated>2018-06-24T13:18:50.910Z</updated>
    
    <content type="html"><![CDATA[<p><div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1522260185415&di=c78f4ea45fb5db5337c73e8189e82ff8&imgtype=0&src=http%3A%2F%2Fp.ananas.chaoxing.com%2Fstar%2F1024_0%2F1385010809221kidou.jpg" width="300" height="180" style="float:right;"><br>　　<br>　　<strong>每周一点图形学暂停。</strong><br>　　最新：Bresenham算法代码<br>   　　<br></div><br><a id="more"></a></p><h1 id="帧缓冲器及分辨率"><a href="#帧缓冲器及分辨率" class="headerlink" title="帧缓冲器及分辨率"></a>帧缓冲器及分辨率</h1><p>帧缓冲器每一个存储单元的位长决定了一幅画面上能同时显示的不同灰度的数目或颜色的种类。<br>如果是单色，则每个像素只需要1Bit表示；<br>如果是16色，则每个像素需要4Bit(2^4=16)表示；<br>如果是256色，则每个需要1个字节（8位，2^8=256）表示；<br>如果是65536（64K）色，则每个像素需要2个字节（16位，2^16=64K）表示；<br>如果是16777216（16.7M）色，则每个需要3个字节（24位，2^24=16.7M）表示（24位真彩色）。</p><p>举例：显卡有2MB显存，当分辨率是1024x768时，可支持的色彩数又是多少？<br>2MB=2x1024x1024=2097152(字节)<br>1024x768=786432(个像素)<br>每个像素如果需要3个字节表示，将超过2MB显存，最多只需要2个字节表示，故只能支持64K色彩数。</p><blockquote><p>题目：显示颜色64K，分辨率为1024*1024的显示器，至少需要的帧缓存容量为(C)<br>A.1MB B.3MB C.2MB D.512KB</p><ul><li>解：显示颜色64K，故每个像素需要2个字节表示。1024x1024=1048576(个像素)，1048576x2=2097152(字节)<br>2097152/1024/1024=2MB</li></ul></blockquote><h1 id="二维图形变换"><a href="#二维图形变换" class="headerlink" title="二维图形变换"></a>二维图形变换</h1><p>两大基本工具：向量分析    图形变换</p><h2 id="向量分析"><a href="#向量分析" class="headerlink" title="向量分析"></a>向量分析</h2><p>向量线性组合<br>w=a1v1+a2v2+…+anvn</p><ol><li>仿射组合<br>a1+a2+…+am=1</li><li>凸组合<br>a1+a2+…+am=1<br>i=1,2,…,m        ai≥0</li></ol><ul><li><p>点积<br>a=(a1,a2) b=(b1,b2)<br>a·b=a1b1+a2b2<br>点积最重要的应用是计算两个向量的夹角或者两条直线的夹角。<br>b·c=|b||c|cosθ<br>cosθ=(b·c)/(|b||c|)=b的单位向量·c的单位向量<br>b·c &gt; 0   θ &lt; 90°<br>b·c = 0   θ = 90°<br>b·c &lt; 0   θ &gt; 90°</p><blockquote><p>如何设计一个算法描述任意两篇新闻的相似性？<br>用一个向量来描述一篇新闻。当夹角的余弦接近1时，相似，归为一类。夹角余弦越小，两条新闻越不相关。</p></blockquote></li><li><p>叉积</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8F%89%E7%A7%AF%E5%85%AC%E5%BC%8F.png?raw=true" alt="叉积公式" title="">                </div>                <div class="image-caption">叉积公式</div>            </figure></li></ul><ol><li>axb和a、b两个向量都正交</li><li>axb的长度等于由a和b决定的平行四边形面积<br>axb=|a||b|sinθ<br>利用叉积求平面的法向量</li></ol><h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><p>将程序中用于描述对象几何信息的数值和那些用于表示对象中大小和位置的数值区分开来。前者通常被看作一个建模（modeling）的任务，后者是一个观察（viewing）的任务。<br>图形显示的过程是几何（对象）模型在不同坐标系之间的映射变换。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>世界坐标系</strong><br>用最适合手中问题的坐标系来描述对象，并且可以自动的缩放和平移图形，使得其能正确地在屏幕窗口中显示。<br><strong>建模坐标系（局部坐标系）</strong><br>建模坐标系独立于世界坐标系来定义物体的几何特性<br><strong>观察坐标系</strong><br>观察坐标系主要用于从观察者的角度对整个世界坐标系内的对象进行重新定位和描述。依据观察窗口的方向和形状在世界坐标系中定义的坐标系成为观察坐标系。观察坐标系用于指定图形的输出范围。<br>二维观察变换的一般方法是在世界坐标系中指定一个观察坐标系统，以该系统为参考通过选定方向和位置来指定矩形剪裁窗口。<br><strong>设备坐标系</strong><br>适合特定输出设备输出对象的坐标系。比如屏幕坐标系。<br>在多数情况下，对于每一个具体的显示设备，都有一个单独的坐标系统。设备坐标是整数。<br><strong>规范化坐标系</strong><br>规范化坐标系独立于设备，能容易地转变为设备坐标系，是一个中间坐标系。<br>为使图形软件能在不同的设备之间移植，采用规范化坐标，坐标轴取值范围是0-1。</p><h3 id="二维变换"><a href="#二维变换" class="headerlink" title="二维变换"></a>二维变换</h3><p>变换图形就是要变换图形的几何关系，即改变顶点的坐标；同时，保持图形的原拓扑关系不变。<br><strong>仿射变换</strong>（Affine Transformation或Affine Map）是一种二维坐标到二维坐标之间的线性变换。<br>（1）“平直性”。即：直线经过变换之后依然是直线<br>（2）“平行性”。即：平行线依然是平行线，且直线上<br>点的位置顺序不变）</p><p><strong>齐次坐标</strong><br>如n维向量（p1,p2,…,pn）表示为（hp1,hp2,…,hpn,h），其中h称为哑坐标。<br>普通坐标与齐次坐标的关系为“一对多”：<br>普通坐标×h→齐次坐标<br>齐次坐标÷h→普通坐标<br>当h = 1时产生的齐次坐标称为“规格化坐标”，因为前n个<br>坐标就是普通坐标系下的n维坐标</p><ul><li>基本几何变换</li></ul><ol><li><p>平移变换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x*=x+Tx</span><br><span class="line">y*=y+Ty</span><br></pre></td></tr></table></figure></li><li><p>比例变换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x*=x·Sx</span><br><span class="line">y*=y·Sy</span><br></pre></td></tr></table></figure></li><li><p>对称变换（反射变换/镜像变换）</p></li><li><p>旋转变换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x*=rcos(α+θ)=rcosαcosθ-rsinαsinθ</span><br><span class="line">y*=rsin(α+θ)=rcosasinθ+rsinαcosθ</span><br><span class="line">x*=xcosθ-ysinθ</span><br><span class="line">y*=xsinθ+ycosθ</span><br></pre></td></tr></table></figure></li><li><p>错切变换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x*=x+cy</span><br><span class="line">y*=bx+y</span><br></pre></td></tr></table></figure></li></ol><p><strong>坐标系变换</strong><br>1.平移变换<br>2.旋转变换<br><strong>相对任意参考点的二维几何变换</strong><br>比例、旋转变换等均与参考点相关。如要对某个参考点（xf，yf）作二维几何变换，其变换过程如下：<br>a、将固定点移至坐标原点，此时进行平移变换<br>b、针对原点进行二维几何变换<br>c、进行反平移，将固定点又移回到原来的位置<br><strong>二维变换矩阵</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8C%E7%BB%B4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5.png?raw=true" alt="二维变换矩阵" title="">                </div>                <div class="image-caption">二维变换矩阵</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%8C%E7%BB%B4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E8%AF%B4%E6%98%8E.png?raw=true" alt="二维变换矩阵说明" title="">                </div>                <div class="image-caption">二维变换矩阵说明</div>            </figure></p><h3 id="窗口视区变换"><a href="#窗口视区变换" class="headerlink" title="窗口视区变换"></a>窗口视区变换</h3><p>窗口：世界坐标系中药显示的区域成为窗口。<br>视区：窗口映射到显示器（设备）上的区域称为视区。<br>观察变换（Viewing Transformation），将窗口到视区的变换处理。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AA%97%E5%8F%A3%E8%A7%86%E5%8C%BA%E5%8F%98%E6%8D%A2.png?raw=true" alt="窗口视区变换" title="">                </div>                <div class="image-caption">窗口视区变换</div>            </figure><br>窗口到视区的映射是基于一个等式，即对每一个在世界坐标下的点（x,y），产生屏幕坐标系中的一个点（sx,sy）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sx=A*x+C</span><br><span class="line">sy=B*y+D</span><br></pre></td></tr></table></figure></p><p>A、B、C、D为常数<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AA%97%E5%8F%A3%E8%A7%86%E5%8C%BA%E5%8F%98%E6%8D%A2%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png?raw=true" alt="映射关系" title="">                </div>                <div class="image-caption">映射关系</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AA%97%E5%8F%A3%E8%A7%86%E5%8C%BA%E5%8F%98%E6%8D%A2%E5%85%AC%E5%BC%8F1.png?raw=true" alt="公式" title="">                </div>                <div class="image-caption">公式</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AA%97%E5%8F%A3%E8%A7%86%E5%8C%BA%E5%8F%98%E6%8D%A2%E5%85%AC%E5%BC%8F2.png?raw=true" alt="公式" title="">                </div>                <div class="image-caption">公式</div>            </figure></p><h1 id="三维图形几何变换"><a href="#三维图形几何变换" class="headerlink" title="三维图形几何变换"></a>三维图形几何变换</h1><p>三维空间中某点的变换可以表示成点的齐次坐标与四阶的三维变换矩阵相乘：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5.png?raw=true" alt="三维变换矩阵" title="">                </div>                <div class="image-caption">三维变换矩阵</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94T3D.png?raw=true" alt="T3D" title="">                </div>                <div class="image-caption">T3D</div>            </figure></p><h2 id="基本变换"><a href="#基本变换" class="headerlink" title="基本变换"></a>基本变换</h2><h3 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E5%B9%B3%E7%A7%BB.png?raw=true" alt="三维平移" title="">                </div>                <div class="image-caption">三维平移</div>            </figure><h3 id="比例变换"><a href="#比例变换" class="headerlink" title="比例变换"></a>比例变换</h3><h4 id="局部比例变换"><a href="#局部比例变换" class="headerlink" title="局部比例变换"></a>局部比例变换</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%B1%80%E9%83%A8%E6%AF%94%E4%BE%8B%E5%8F%98%E6%8D%A2.png?raw=true" alt="局部比例变换" title="">                </div>                <div class="image-caption">局部比例变换</div>            </figure><h4 id="整体比例变换"><a href="#整体比例变换" class="headerlink" title="整体比例变换"></a>整体比例变换</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B4%E4%BD%93%E6%AF%94%E4%BE%8B%E5%8F%98%E6%8D%A2.png?raw=true" alt="整体比例变换" title="">                </div>                <div class="image-caption">整体比例变换</div>            </figure><h3 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h3><h4 id="绕z轴旋转θ"><a href="#绕z轴旋转θ" class="headerlink" title="绕z轴旋转θ"></a>绕z轴旋转θ</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94-%E4%B8%89%E7%BB%B4%E7%BB%95z%E6%97%8B%E8%BD%AC.png?raw=true" alt="三维绕z旋转" title="">                </div>                <div class="image-caption">三维绕z旋转</div>            </figure><h4 id="绕x轴旋转"><a href="#绕x轴旋转" class="headerlink" title="绕x轴旋转"></a>绕x轴旋转</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94-%E4%B8%89%E7%BB%B4%E7%BB%95x%E6%97%8B%E8%BD%AC.png?raw=true" alt="三维绕x旋转" title="">                </div>                <div class="image-caption">三维绕x旋转</div>            </figure><h4 id="绕y轴旋转"><a href="#绕y轴旋转" class="headerlink" title="绕y轴旋转"></a>绕y轴旋转</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94-%E4%B8%89%E7%BB%B4%E7%BB%95y%E6%97%8B%E8%BD%AC.png?raw=true" alt="三维绕y旋转" title="">                </div>                <div class="image-caption">三维绕y旋转</div>            </figure><h3 id="对称变换"><a href="#对称变换" class="headerlink" title="对称变换"></a>对称变换</h3><h4 id="关于坐标平面的对称"><a href="#关于坐标平面的对称" class="headerlink" title="关于坐标平面的对称"></a>关于坐标平面的对称</h4><p>xoy:<br>[x’ y’ z’ 1] =  [x y -z 1]<br>yoz:<br>[x’ y’ z’ 1] =  [-x y z 1]<br>zox:<br>[x’ y’ z’ 1] =  [x -y z 1]</p><h4 id="关于坐标轴对称"><a href="#关于坐标轴对称" class="headerlink" title="关于坐标轴对称"></a>关于坐标轴对称</h4><p>x:<br>[x’ y’ z’ 1] = [x -y -z 1]<br>y:<br>[x’ y’ z’ 1] = [-x y -z 1]<br>z:<br>[x’ y’ z’ 1] = [-x -y z 1]</p><h2 id="投影变换"><a href="#投影变换" class="headerlink" title="投影变换"></a>投影变换</h2><p>在二维平面上显示三维物体的解决方法：投影变换。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94-%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95%E6%8A%95%E5%BD%B1.png?raw=true" alt="平面几何投影分类" title="">                </div>                <div class="image-caption">平面几何投影分类</div>            </figure><br>正投影根据投影面与坐标轴的夹角又可分为两类：三视图和<br>正轴侧图。<br>当投影面与某一坐标轴垂直时，得到的投影为三视图，这时<br>投影方向与这个坐标轴的方向一致；否则，得到的投影为正<br>轴侧图。</p><h3 id="三视图的计算"><a href="#三视图的计算" class="headerlink" title="三视图的计算"></a>三视图的计算</h3><p>具体计算步骤如下：<br>a、确定三维物体上各点的位置坐标；<br>b、引入齐次坐标，求出所作变换相应的变换矩阵；<br>c、将所作变换用矩阵表示，通过运算求得三维物<br>体上各点经变换后的点坐标值；<br>d、由变换后得到的二维点绘出三维物体投影后的三视图</p><h4 id="主视图"><a href="#主视图" class="headerlink" title="主视图"></a>主视图</h4><p>投影变换矩阵：[x’ y’ z’ 1] = [x 0 z 1]</p><h4 id="俯视图"><a href="#俯视图" class="headerlink" title="俯视图"></a>俯视图</h4><p>投影变换矩阵：[x’ y’ z’ 1] = [x y 0 1]<br>为了使俯视图与主视图都画在一个平面内，就要使H面绕x轴<br>顺时针转90°，即应有一个旋转变换。为了使主视图和俯视图有一定的间距，还要使H面沿z方向平移一段距离-z<sub>0</sub>，有一个平移矩阵。<br>所以，最终俯视图投影变换矩阵：<br>[x’ y’ z’ 1] = [x y -(y+z<sub>0</sub>） 1]</p><h3 id="侧视图"><a href="#侧视图" class="headerlink" title="侧视图"></a>侧视图</h3><p>为了使侧视图与主视图也在一个平面内，就要使W面绕z轴正<br>转90°，有一个旋转矩阵。为使主视图和侧视图有一定的间距，还要使W面沿负x方向平移一段距离-x<sub>0</sub>，有一个平移矩阵。<br>所以，最终侧视图投影变换矩阵：<br>[x’ y’ z’ 1] = [-(y+z<sub>0</sub>) 0 z 1]</p><p>三个视图中的y’均为0，表明三个视图均落在xoz面上。</p><h2 id="正轴测图"><a href="#正轴测图" class="headerlink" title="正轴测图"></a>正轴测图</h2><p>正轴测有等轴测、正二测和正三测三种：<br>当投影面与三个坐标轴之间的夹角都相等时为等轴测<br>当投影面与两个坐标轴之间的夹角相等时为正二测<br>当投影面与三个坐标轴之间的夹角都不相等时为正三测<br>变换矩阵为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x*=xcosγ-ysinγ</span><br><span class="line">y*=0</span><br><span class="line">z*=-xsinγsinα-ycosγsina+zcosα</span><br></pre></td></tr></table></figure></p><h2 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94T3D.png?raw=true" alt="T3D" title="">                </div>                <div class="image-caption">T3D</div>            </figure><p>其中的[p,q,r]能产生透视变换的效果</p><p><img src="" alt="透视"></p><h3 id="一点透视"><a href="#一点透视" class="headerlink" title="一点透视"></a>一点透视</h3><p>灭点：聚焦的那个点</p><h3 id="多点透视"><a href="#多点透视" class="headerlink" title="多点透视"></a>多点透视</h3><p>多个灭点</p><p>构造二点透视的一般步骤如下：<br>（1）将物体平移到适当位置l、m、n<br>（2）将物体绕y轴旋转θ角<br>（3）进行透视变换<br>（4）最后向xoy面做正投影，即得二点透视图</p><p>构造三点透视的一般步骤如下：<br>（1）将物体平移到适当位置<br>（2）将物体绕y轴旋转θ角<br>（3）再绕x轴旋转α角<br>（4）进行透视变换<br>（5）最后向xoy面做正投影，即得三点透视图</p><h1 id="光栅图形学算法"><a href="#光栅图形学算法" class="headerlink" title="光栅图形学算法"></a>光栅图形学算法</h1><h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><ul><li>直线段的扫描转换算法</li><li>多边形的扫描转换与区域填充算法</li><li>裁剪算法</li><li>反走样算法</li><li>消隐算法</li></ul><h2 id="直线段的扫描转换算法"><a href="#直线段的扫描转换算法" class="headerlink" title="直线段的扫描转换算法"></a>直线段的扫描转换算法</h2><p>P<sub>0</sub>（x<sub>0</sub>,y<sub>0</sub>）    P<sub>1</sub>(x<sub>1</sub>,y<sub>1</sub>)<br>y=kx+b<br>k=(y<sub>1</sub>-y<sub>o</sub>)/(x<sub>1</sub>-x<sub>0</sub>)  (x<sub>1</sub>≠x<sub>0</sub>)<br>假设x已知，即从x的起点xo开始，沿x方向前进一个像素（步长=1），可以计算出相应的y值。因为像素的坐标是整数，所以y值要进行取整处理。<br>如何把数学上的一个点扫描转换一个屏幕像素点？<br>如：P（1.7, 0.8）—(取整)—&gt;P(1, 0)<br>P(1.7, 0.8) -(+0.5)-&gt; p(2.2, 1.3)<br>P(2.2, 1.3) -(取整)-&gt; p(2, 1)<br>为提高效率，减小计算量，要把乘法消掉。</p><h2 id="直线绘制的三个著名的常用算法"><a href="#直线绘制的三个著名的常用算法" class="headerlink" title="直线绘制的三个著名的常用算法"></a>直线绘制的三个著名的常用算法</h2><ol><li>数值微分法（DDA）</li><li>中点画线法</li><li>Bresenham算法</li></ol><h3 id="数值微分DDA（Digital-Differential-Analyzer）"><a href="#数值微分DDA（Digital-Differential-Analyzer）" class="headerlink" title="数值微分DDA（Digital Differential Analyzer）"></a>数值微分DDA（Digital Differential Analyzer）</h3><p>引进图形学中一个重要思想——增量思想<br>直线斜率小于1：<br>x=x+1<br>y=y+k<br>(注意y+0.5化为整数)<br>直线斜率大于1：<br>x=x+1/k<br>y=y+1<br>（注意x+0.5化为整数）</p><h3 id="DDA算法代码"><a href="#DDA算法代码" class="headerlink" title="DDA算法代码"></a>DDA算法代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CDrawLinesDlg::DDALine(<span class="keyword">int</span> iBeginX, <span class="keyword">int</span> iBeginY, <span class="keyword">int</span> iEndX, <span class="keyword">int</span> iEndY, COLORREF col)</span><br><span class="line">&#123;</span><br><span class="line">CDC *pDC = GetDC();</span><br><span class="line">pDC-&gt;TextOut(<span class="number">450</span>, <span class="number">18</span>, _T(<span class="string">"DDA画线成功！"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> x, y, dx, dy, k, r;</span><br><span class="line"><span class="keyword">float</span> xm, ym;</span><br><span class="line">dx = iEndX - iBeginX;</span><br><span class="line">dy = iEndY - iBeginY;</span><br><span class="line">k = dy / dx;</span><br><span class="line">r = dx / dy;<span class="comment">//r为斜率倒数</span></span><br><span class="line">x = iEndX;</span><br><span class="line">y = iEndY;</span><br><span class="line">xm = iBeginX;</span><br><span class="line">ym = iBeginY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(dx) &gt; <span class="built_in">abs</span>(dy))<span class="comment">//斜率小于1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (iBeginX &lt;= iEndX)</span><br><span class="line">&#123;</span><br><span class="line">x = iBeginX;</span><br><span class="line">xm = iEndX;</span><br><span class="line">y = iBeginY;</span><br><span class="line">ym = iEndY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= xm)</span><br><span class="line">&#123;</span><br><span class="line">y = y + k;</span><br><span class="line">pDC-&gt;SetPixel(x, (<span class="keyword">int</span>)(y + <span class="number">0.5</span>), col);</span><br><span class="line">++x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//斜率大于1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (iBeginY &lt;= iEndY)</span><br><span class="line">&#123;</span><br><span class="line">x = iBeginX;</span><br><span class="line">xm = iEndX;</span><br><span class="line">y = iBeginY;</span><br><span class="line">ym = iEndY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y &lt;= ym)</span><br><span class="line">&#123;</span><br><span class="line">x = x + r;</span><br><span class="line">pDC-&gt;SetPixel((<span class="keyword">int</span>)(x + <span class="number">0.5</span>), y, col);</span><br><span class="line">++y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中点画线法"><a href="#中点画线法" class="headerlink" title="中点画线法"></a>中点画线法</h3><p>核心思想：考虑斜率小于1，若x每次+1，y值要么+1，要么不+1。<br>直线一般式方程；Ax+By+C=0<br>设y+1和y之间的中点M，把M带入方程。d=Ax+By+C<br>d &lt; 0    M在直线下方 选上面那个点(y+1)<br>d &gt; 0    M在直线上方 选下面那个点(y)</p><h3 id="中点画线法代码"><a href="#中点画线法代码" class="headerlink" title="中点画线法代码"></a>中点画线法代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CDrawLinesDlg::MidLine(<span class="keyword">int</span> iBeginX, <span class="keyword">int</span> iBeginY, <span class="keyword">int</span> iEndX, <span class="keyword">int</span> iEndY, COLORREF col)</span><br><span class="line">&#123;</span><br><span class="line">CDC  *pDc = GetDC();</span><br><span class="line">pDc-&gt;TextOut(<span class="number">450</span>, <span class="number">18</span>, _T(<span class="string">"中点画线法成功！"</span>));</span><br><span class="line"><span class="keyword">int</span>  d1, d2, d;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p, p1, q, q1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = iBeginX;</span><br><span class="line"><span class="keyword">int</span> y = iBeginY;</span><br><span class="line"><span class="keyword">int</span> a = iBeginY - iEndY;</span><br><span class="line"><span class="keyword">int</span> b = iEndX - iEndY;</span><br><span class="line"><span class="keyword">int</span> dx = <span class="built_in">abs</span>(iBeginX - iEndX);</span><br><span class="line"><span class="keyword">int</span> dy = <span class="built_in">abs</span>(iBeginY - iEndY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二、四象限</span></span><br><span class="line"><span class="keyword">if</span> (((iEndX - iBeginX &gt;= <span class="number">0</span>) &amp;&amp; (iEndY - iBeginY&lt;<span class="number">0</span>)) || ((iEndX - iBeginX &lt;= <span class="number">0</span>) &amp;&amp; (iEndY - iBeginY&gt;<span class="number">0</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从第四象限到第二象限</span></span><br><span class="line"><span class="keyword">if</span> ((iEndX - iBeginX &lt;= <span class="number">0</span>) &amp;&amp; (iEndY - iBeginY &gt; <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">a = -a;</span><br><span class="line">b = -b;</span><br><span class="line">x = iEndX;</span><br><span class="line">y = iEndY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//斜率小于1</span></span><br><span class="line"><span class="keyword">if</span> (dx &gt;= dy)</span><br><span class="line">&#123;</span><br><span class="line">num = dx;<span class="comment">//以x轴为基准</span></span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">p1 = <span class="number">0</span>;</span><br><span class="line">q = <span class="number">1</span>;</span><br><span class="line">q1 = <span class="number">-1</span>;</span><br><span class="line">d = <span class="number">2</span> * a - b;<span class="comment">//初始值</span></span><br><span class="line">d2 = <span class="number">2</span> * a;<span class="comment">//当大于0时的增量</span></span><br><span class="line">d1 = <span class="number">2</span> * (a - b);<span class="comment">//当小于0时的增量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">num = dy;<span class="comment">//以y轴为基准</span></span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">p1 = <span class="number">-1</span>;</span><br><span class="line">q = <span class="number">0</span>;</span><br><span class="line">q1 = <span class="number">-1</span>;</span><br><span class="line">d = a - <span class="number">2</span> * b;</span><br><span class="line">d1 = -(<span class="number">2</span> * b);</span><br><span class="line">d2 = <span class="number">2</span> * (a - b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//第一、三象限</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((iEndX - iBeginX &lt;= <span class="number">0</span>) &amp;&amp; (iEndY - iBeginY &lt; <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">a = -a;</span><br><span class="line">b = -b;</span><br><span class="line">x = iEndX;</span><br><span class="line">y = iEndY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dx &gt;= dy)</span><br><span class="line">&#123;</span><br><span class="line">num = dx;</span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">p1 = <span class="number">1</span>;</span><br><span class="line">q = <span class="number">1</span>;</span><br><span class="line">q1 = <span class="number">0</span>;</span><br><span class="line">d = <span class="number">2</span> * a + b;</span><br><span class="line">d1 = <span class="number">2</span> * a;</span><br><span class="line">d2 = <span class="number">2</span> * (a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">num = dy;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line">p1 = <span class="number">1</span>;</span><br><span class="line">q = <span class="number">1</span>;</span><br><span class="line">q1 = <span class="number">1</span>;</span><br><span class="line">d = a + <span class="number">2</span> * b;</span><br><span class="line">d2 = <span class="number">2</span> * b;</span><br><span class="line">d1 = <span class="number">2</span> * (a + b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pDc-&gt;SetPixel(x, y, col);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d &lt; <span class="number">0</span>)<span class="comment">//d(new)=d(old)+A+B选Pu(上面一点)</span></span><br><span class="line">&#123;</span><br><span class="line">x += p;</span><br><span class="line">y += p1;</span><br><span class="line">d += d2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//d(new)=d(old)+A 选Pd(下面一点)</span></span><br><span class="line">&#123;</span><br><span class="line">x += q;</span><br><span class="line">y += q1;</span><br><span class="line">d += d1;</span><br><span class="line">&#125;</span><br><span class="line">pDc-&gt;SetPixel(x, y, col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bresenham算法"><a href="#Bresenham算法" class="headerlink" title="Bresenham算法"></a>Bresenham算法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Bresenham%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4.png?raw=true" alt="算法步骤" title="">                </div>                <div class="image-caption">算法步骤</div>            </figure><h3 id="Bresenham算法代码"><a href="#Bresenham算法代码" class="headerlink" title="Bresenham算法代码"></a>Bresenham算法代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">void CDrawLinesDlg::BresenhamLine(int iBeginX, int iBeginY, int iEndX, int iEndY, COLORREF col)</span><br><span class="line">&#123;</span><br><span class="line">CDC *pDC = GetDC();</span><br><span class="line">pDC-&gt;TextOut(450, 18, _T(&quot;Bresenham画线成功！&quot;));</span><br><span class="line"></span><br><span class="line">int dx = abs(iEndX - iBeginX);</span><br><span class="line">int dy = abs(iEndY - iBeginY);</span><br><span class="line">int x = iBeginX;</span><br><span class="line">int y = iBeginY;</span><br><span class="line">int stepX = 1;</span><br><span class="line">int stepY = 1;</span><br><span class="line">if (iBeginX &gt; iEndX)  //从右向左画  </span><br><span class="line">&#123;</span><br><span class="line">stepX = -1;</span><br><span class="line">&#125;</span><br><span class="line">if (iBeginY &gt; iEndY)//从下往上画</span><br><span class="line">&#123;</span><br><span class="line">stepY = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (dx &gt; dy)  //斜率大于1</span><br><span class="line">&#123;</span><br><span class="line">int e = dy * 2 - dx;</span><br><span class="line">for (int i = 0; i &lt;= dx; i++)</span><br><span class="line">&#123;</span><br><span class="line">pDC-&gt;SetPixel(x, y, col);</span><br><span class="line">x += stepX;</span><br><span class="line">e += dy;</span><br><span class="line">if (e &gt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">y += stepY;</span><br><span class="line">e -= dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else//斜率小于1</span><br><span class="line">&#123;</span><br><span class="line">int e = 2 * dx - dy;</span><br><span class="line">for (int i = 0; i &lt;= dy; i++)</span><br><span class="line">&#123;</span><br><span class="line">pDC-&gt;SetPixel(x, y, col);</span><br><span class="line">y += stepY;</span><br><span class="line">e += dx;</span><br><span class="line">if (e &gt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">x += stepX;</span><br><span class="line">e -= dy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三者区别</strong>：DDA是浮点数加法，中点画线是整数加法，Bresenham不判断大小，是判断符号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522260185415&amp;di=c78f4ea45fb5db5337c73e8189e82ff8&amp;imgtype=0&amp;src=http%3A%2F%2Fp.ananas.chaoxing.com%2Fstar%2F1024_0%2F1385010809221kidou.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;　　&lt;br&gt;　　&lt;strong&gt;每周一点图形学暂停。&lt;/strong&gt;&lt;br&gt;　　最新：Bresenham算法代码&lt;br&gt;   　　&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="计算机图形学" scheme="https://hubojing.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>BCG网格控件增删移动</title>
    <link href="https://hubojing.github.io/2018/03/03/BCG%E7%BD%91%E6%A0%BC%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E7%A7%BB%E5%8A%A8/"/>
    <id>https://hubojing.github.io/2018/03/03/BCG网格控件增删移动/</id>
    <published>2018-03-03T15:21:49.000Z</published>
    <updated>2018-03-03T15:47:28.478Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://raw.githubusercontent.com/hubojing/BlogImages/6bb9621117d54f0c4d45ddd281fcab403be2843e/BCG%E7%BD%91%E6%A0%BC%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E7%A7%BB%E5%8A%A8.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>一个小demo——CBCGPGridCtrl网格控件增加行、删除行、上下移动行。</strong><br><br><br> </div><a id="more"></a><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">BOOL CtestDlg::OnInitDialog()</span><br><span class="line">&#123;</span><br><span class="line">CBCGPDialog::OnInitDialog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the icon for this dialog.  The framework does this automatically</span></span><br><span class="line"><span class="comment">//  when the application's main window is not a dialog</span></span><br><span class="line">SetIcon(m_hIcon, TRUE);<span class="comment">// Set big icon</span></span><br><span class="line">SetIcon(m_hIcon, FALSE);<span class="comment">// Set small icon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add extra initialization here</span></span><br><span class="line"><span class="function">CRect <span class="title">rect</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)</span></span>;</span><br><span class="line">m_pGridCtrl = <span class="keyword">new</span> CBCGPGridCtrl;</span><br><span class="line">m_pGridCtrl-&gt;Create(WS_CHILD, rect, <span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">m_pGridCtrl-&gt;ShowWindow(SW_SHOW);</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;InsertColumn(<span class="number">0</span>, _T(<span class="string">"name"</span>), <span class="number">40</span>);</span><br><span class="line">m_pGridCtrl-&gt;InsertColumn(<span class="number">1</span>, _T(<span class="string">"sex"</span>), <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">CBCGPGridRow* pRow = <span class="keyword">new</span> CBCGPGridRow;</span><br><span class="line">m_pGridCtrl-&gt;AddRow(pRow);</span><br><span class="line">CBCGPGridItem* pNameItem = pRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">pRow-&gt;AddItem(pNameItem);</span><br><span class="line">pNameItem-&gt;SetValue(<span class="string">"Nancy"</span>);</span><br><span class="line"></span><br><span class="line">CBCGPGridItem* pSexItem = pRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">pRow-&gt;AddItem(pSexItem);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"男"</span>);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"女"</span>);</span><br><span class="line">pSexItem-&gt;SetValue(<span class="string">"男"</span>);<span class="comment">//默认值为“男”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE  unless you set the focus to a control</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加行"><a href="#增加行" class="headerlink" title="增加行"></a>增加行</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CtestDlg::OnBnClickedBtnAdd()</span><br><span class="line">&#123;</span><br><span class="line">CBCGPGridRow* pRow = <span class="keyword">new</span> CBCGPGridRow;</span><br><span class="line">m_pGridCtrl-&gt;AddRow(pRow);</span><br><span class="line"><span class="keyword">int</span> iRow = pRow-&gt;GetRowId();</span><br><span class="line">CBCGPGridItem* pNameItem = pRow-&gt;CreateItem(iRow, <span class="number">0</span>);</span><br><span class="line">pRow-&gt;AddItem(pNameItem);</span><br><span class="line">CBCGPGridItem* pSexItem = pRow-&gt;CreateItem(iRow, <span class="number">1</span>);</span><br><span class="line">pRow-&gt;AddItem(pSexItem);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"男"</span>);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"女"</span>);</span><br><span class="line">pSexItem-&gt;SetValue(<span class="string">"男"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CtestDlg::OnBnClickedBtnDelete()</span><br><span class="line">&#123;</span><br><span class="line">CBCGPGridRow* pRow = m_pGridCtrl-&gt;GetCurSel();</span><br><span class="line"><span class="keyword">if</span> (!pRow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iRow = pRow-&gt;GetRowId();</span><br><span class="line">m_pGridCtrl-&gt;RemoveRow(iRow);</span><br><span class="line">CBCGPGridRow* pPreRow = m_pGridCtrl-&gt;GetRow(iRow - <span class="number">1</span>);</span><br><span class="line">m_pGridCtrl-&gt;AdjustLayout();</span><br><span class="line">m_pGridCtrl-&gt;SetCurSel(pPreRow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上移行"><a href="#上移行" class="headerlink" title="上移行"></a>上移行</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CtestDlg::OnBnClickedBtnMoveUp()</span><br><span class="line">&#123;</span><br><span class="line">CBCGPGridRow* pRow = m_pGridCtrl-&gt;GetCurSel();</span><br><span class="line"><span class="keyword">if</span> (!pRow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iRow = pRow-&gt;GetRowId();</span><br><span class="line">CBCGPGridRow* pNewRow = <span class="keyword">new</span> CBCGPGridRow;</span><br><span class="line">m_pGridCtrl-&gt;InsertRowBefore(iRow - <span class="number">1</span>, pNewRow);</span><br><span class="line">CBCGPGridItem* pNameItem = pNewRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">pNewRow-&gt;AddItem(pNameItem);</span><br><span class="line">pNameItem-&gt;SetValue(pRow-&gt;GetItem(<span class="number">0</span>)-&gt;GetValue());</span><br><span class="line"></span><br><span class="line">CBCGPGridItem* pSexItem = pNewRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">pNewRow-&gt;AddItem(pSexItem);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"男"</span>);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"女"</span>);</span><br><span class="line">pSexItem-&gt;SetValue(pRow-&gt;GetItem(<span class="number">1</span>)-&gt;GetValue());</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;RemoveRow(iRow + <span class="number">1</span>);</span><br><span class="line">m_pGridCtrl-&gt;AdjustLayout();</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;SetCurSel(iRow - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下移行"><a href="#下移行" class="headerlink" title="下移行"></a>下移行</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CtestDlg::OnBnClickedBtnMoveDown()</span><br><span class="line">&#123;</span><br><span class="line">CBCGPGridRow* pRow = m_pGridCtrl-&gt;GetCurSel();</span><br><span class="line"><span class="keyword">if</span> (!pRow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iRow = pRow-&gt;GetRowId();</span><br><span class="line"></span><br><span class="line">CBCGPGridRow* pNewRow = <span class="keyword">new</span> CBCGPGridRow;</span><br><span class="line">m_pGridCtrl-&gt;InsertRowAfter(iRow+<span class="number">1</span>, pNewRow);</span><br><span class="line">CBCGPGridItem* pNameItem = pNewRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">pNewRow-&gt;AddItem(pNameItem);</span><br><span class="line">pNameItem-&gt;SetValue(pRow-&gt;GetItem(<span class="number">0</span>)-&gt;GetValue());</span><br><span class="line"></span><br><span class="line">CBCGPGridItem* pSexItem = pNewRow-&gt;CreateItem(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">pNewRow-&gt;AddItem(pSexItem);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"男"</span>);</span><br><span class="line">pSexItem-&gt;AddOption(<span class="string">"女"</span>);</span><br><span class="line">pSexItem-&gt;SetValue(pRow-&gt;GetItem(<span class="number">1</span>)-&gt;GetValue());</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;RemoveRow(iRow);</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;AdjustLayout();</span><br><span class="line"></span><br><span class="line">m_pGridCtrl-&gt;SetCurSel(iRow+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li><p>pRow可以有多种方式创建，可以先new CBCGPGridRow后再AddRow到网格控件对象m_pGridCtrl中。也可以直接    <code>m_pGridCtrl-&gt;CreateRow();</code>。不过CBCGPGridItem不可以直接new，只能通过    <code>CBCGPGridItem* pNameItem = pRow-&gt;CreateItem(iRow, 0)</code>来得到。</p></li><li><p><code>m_pGridCtrl-&gt;RemoveRow(iRow);</code>操作后若想继续选中现有某行，需要<strong>    <code>m_pGridCtrl-&gt;AdjustLayout();</code></strong>来调整布局刷新网格，再调用SetCurSel实现选中操作。</p></li><li><p><code>InsertRowBefore</code>和<code>InsertRowAfter</code>的两个参数是：被插入行（在该行前或后插入新行），新插入行数据指针<code>CBCGPGridRow* pRow</code>。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hubojing/BlogImages/6bb9621117d54f0c4d45ddd281fcab403be2843e/BCG%E7%BD%91%E6%A0%BC%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E7%A7%BB%E5%8A%A8.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;一个小demo——CBCGPGridCtrl网格控件增加行、删除行、上下移动行。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="BCG" scheme="https://hubojing.github.io/tags/BCG/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio配置JDK</title>
    <link href="https://hubojing.github.io/2018/02/23/AndroidStudio%E9%85%8D%E7%BD%AEJDK/"/>
    <id>https://hubojing.github.io/2018/02/23/AndroidStudio配置JDK/</id>
    <published>2018-02-23T15:18:25.000Z</published>
    <updated>2018-02-23T15:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1520102177973&di=b292a9132576d506db589613a4e1bb4a&imgtype=0&src=http%3A%2F%2Fwww.eightbitdreams.com%2Fwp-content%2Fuploads%2F2015%2F05%2Fandroid-studio-logo.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>Android Studio配置内嵌JDK。</strong><br><br><br> </div><a id="more"></a><p>　　今天发现JDK环境变量没有配置好。</p><p>　　我没有专门去下载java，在下载Android Studio时，会自带内嵌的JDK。<br>　　打开File-OtherSettings-DefaultProjectStructure，可看到AS已自动勾选Use embedded JDK，而且是官方推荐的做法。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/AndroidStudio%E9%85%8D%E7%BD%AEJDK%E2%80%94%E2%80%94JDK%E9%80%89%E9%A1%B9.png?raw=true" alt="JDK选项" title="">                </div>                <div class="image-caption">JDK选项</div>            </figure></p><p>　　以下是配置环境变量的操作。<br>　　java 1.8以后就无需CLASSPATH环境变量了。<br>　　我们只需配置JAVA_HOME和PATH即可。<br>　　JAVA_HOME    C:\AndroidStudio\jre    (JDK安装目录)<br>　　在PATH后新增：<br>　　%JAVA_HOME%\bin<br>　　%JAVA_HOME%\jre\bin</p><p>　　测试一下：<br>　　在cmd中查看java版本。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/AndroidStudio%E9%85%8D%E7%BD%AEJDK%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95.png?raw=true" alt="测试" title="">                </div>                <div class="image-caption">测试</div>            </figure><br>　　成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1520102177973&amp;di=b292a9132576d506db589613a4e1bb4a&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.eightbitdreams.com%2Fwp-content%2Fuploads%2F2015%2F05%2Fandroid-studio-logo.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;Android Studio配置内嵌JDK。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Android" scheme="https://hubojing.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>递归中的return</title>
    <link href="https://hubojing.github.io/2018/02/22/%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84return/"/>
    <id>https://hubojing.github.io/2018/02/22/递归中的return/</id>
    <published>2018-02-22T08:38:03.000Z</published>
    <updated>2018-02-23T05:22:02.305Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84return%E2%80%94%E2%80%94%E9%80%92%E5%BD%92%E6%B5%81%E7%A8%8B.jpg?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>浅谈递归。</strong><br><br><br> </div><a id="more"></a><p>　　递归的核心是重复和嵌套。<br>　　看到的一个惊人比喻来解释什么是递归：</p><blockquote><p>古之欲明明德于天下者，先治其国；欲治其国者，先齐其家；欲齐其家者，先修其身；欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知，致知在格物。物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。</p></blockquote><p>　　可以理解为调用自身的过程，最外层函数是“明德于天下”，每一层传入的参数依次是治国、齐家、修身、正心、诚意、致知、格物。然后再从最内层逐层返回。</p><p>　　如果文言比较难理解，看到的另外一个好解释，以查字典作比：</p><blockquote><p>我们使用的词典，本身就是递归，为了解释一个词，需要使用更多的词。当你查一个词，发现这个词的解释中某个词仍然不懂，于是你开始查这第二个词，可惜，第二个词里仍然有不懂的词，于是查第三个词，这样查下去，直到有一个词的解释是你完全能看懂的，那么递归走到了尽头，然后你开始后退，逐个明白之前查过的每一个词，最终，你明白了最开始那个词的意思。</p></blockquote><p>　　本文的右上方配图很直观说明了递归的层次关系。现放大如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84return%E2%80%94%E2%80%94%E9%80%92%E5%BD%92%E6%B5%81%E7%A8%8B.jpg?raw=true" alt="递归层次" title="">                </div>                <div class="image-caption">递归层次</div>            </figure></p><p>　　但递归不该是无限的。所以，这样的比喻欠妥：</p><blockquote><p>从前有座山，山里有个庙，庙里有个老和尚，他在讲：<br>从前有座山，山里有个庙，庙里有个老和尚，他在讲：<br>……</p></blockquote><p>　　因为这个调用自身的情况没有尽头，也就是没有返回条件。如果是实际情况估计会内存溢出。</p><p>　　所以递归中的返回条件是很重要的，常以程序里的return示之。所以要看清，return后是返回到了哪里。笼统地说，遇到return就会跳出函数。细致一点，return是返回到被调用处。在递归函数里，遇到return退出了这一次的调用，回到被调用处即上一层调用递归处。</p><p>　eg.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool Traverse()</span><br><span class="line">&#123;</span><br><span class="line">if(满足条件)</span><br><span class="line">    &#123;</span><br><span class="line">    return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    bool bFlag = Traverse();//递归</span><br><span class="line">        if(bFlag == true)</span><br><span class="line">        &#123;</span><br><span class="line">        return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　梳理这段代码。干脆，把“满足条件”设为“中彩票”吧。第一次进入Traverse()函数，如果中了彩票，就返回true，跳出Traverse()函数。如果没中彩票，就调用递归（即第二次进入Traverse()函数）。<br>　　在第二次Traverse()函数里，如果中了彩票就返回true,跳出<strong>第二次Traverse()函数</strong>，返回到被调用处，即bool bFlag=Traverse();这里，此时，bFlag的值为true。接着判断bFlag的值是否为true，如果为true，则返回true，跳出<strong>第一次Traverse()函数</strong>。这样子Traverse()函数的调用才算结束。<br>在第二次Traverse()函数里，如果没中彩票，就调用递归（即进入第三次Traverse()函数）。<br>　　在第三次Traverse()函数里……</p><p>　　会发现第n+1次和第n次的调用方法是一样一样的。不过既然递归次数应该有限，那么也就是说，经过x次递归后，必中彩票。（x是有限次）</p><p>　　例子归例子，我们知道，现实生活中彩票依概率满足“无限递归”（编程里不被允许），x依概率趋近于无穷大。</p><p>　　其中需要引起重视的是，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(bFlag == true)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　这个判断在很多时候是非常重要的。因为子递归时多数场合需得到该层递归的返回值，来判断究竟是再次递归呢，还是已得到目标值返回到上一层。</p><p>　　如果是不需要返回值的递归，就易懂得多了。<br>　　eg.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int iAge = 0;</span><br><span class="line">void Grow()</span><br><span class="line">&#123;</span><br><span class="line">iAge++;</span><br><span class="line">    if(iAge &gt; 18)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;&quot;成年啦！&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    Grow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　虽然没有用return返回要求值，但实质一样，通过条件语句及递归调用自身累加类变量iAge，得到了所需值。</p><p>　　浅谈递归，如有错误，不吝赐教。^_^</p><p>相关：<a href="https://www.zhihu.com/question/20507130" target="_blank" rel="noopener">什么是递归？</a><br>（抖机灵太多……）</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84return%E2%80%94%E2%80%94%E9%80%92%E5%BD%92%E6%B5%81%E7%A8%8B.jpg?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;浅谈递归。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg开发环境搭建</title>
    <link href="https://hubojing.github.io/2018/02/22/ffmpeg%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://hubojing.github.io/2018/02/22/ffmpeg开发环境搭建/</id>
    <published>2018-02-22T02:23:51.000Z</published>
    <updated>2018-02-22T03:36:49.243Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519277154249&di=8b9a60a72da8a1979c84f0f3bd11dfc1&imgtype=jpg&src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1768997415%2C378959485%26fm%3D214%26gp%3D0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>VS2013+ffmpeg开发环境搭建。</strong><br><br><br> </div><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>　　<a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds/</a></p><ul><li>Static版本包含ffmpeg.exe 、ffplay.exe 、ffprobe.exe，相关的DLL已经被编译到exe里。</li><li>Shared版本除了ffmpeg.exe , ffplay.exe , ffprobe.exe之外还有一些DLL，exe体积很小，在运行时到相应的DLL中调用功能。</li><li>Dev开发者（developer）版本，包含了库文件xxx.lib以及头文件xxx.h，不含exe文件。</li></ul><p>这里选择下载Shared版本和Dev版本。（ffmpeg.exe 、ffplay.exe 、ffprobe.exe可以直接通过命令行运行使用）</p><p>或者直接下载我打包好的环境配置文件：<br><a href="http://download.csdn.net/download/hubojing/10254452" target="_blank" rel="noopener">http://download.csdn.net/download/hubojing/10254452</a><br>（csdn现在没免费的了，就勾了最低的2分）</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>将dev版本文件夹中的Include和lib目录复制到所需工程项目目录下，并在工程属性中设置附加包含目录<code>$(ProjectDir)\include</code>和附加库目录<code>$(ProjectDir)\lib</code>。</li><li>将share版本文件夹中bin目录下对应的所有dll复制到项目路径下。</li><li>附加依赖项填入（根据所需）<br>avcodec.lib<br>avdevice.lib<br>avfilter.lib<br>avformat.lib<br>avutil.lib<br>postproc.lib<br>swresample.lib<br>swscale.lib</li></ol><p>　　由于ffmpeg是C语言所写，include头文件时需使用extern “C”标明。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern &quot;C&quot;</span><br><span class="line">&#123;</span><br><span class="line">#include &lt;libavformat/avformat.h&gt;</span><br><span class="line">#include &lt;libavutil/dict.h&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">AVFormatContext *fmt_ctx = NULL;</span><br><span class="line">AVDictionaryEntry *tag = NULL;</span><br><span class="line">int ret;</span><br><span class="line"></span><br><span class="line">if (argc != 2) &#123;</span><br><span class="line">printf(&quot;usage: %s &lt;input_file&gt;\n&quot;</span><br><span class="line">&quot;example program to demonstrate the use of the libavformat metadata API.\n&quot;</span><br><span class="line">&quot;\n&quot;, argv[0]);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ((ret = avformat_open_input(&amp;fmt_ctx, argv[1], NULL, NULL)))</span><br><span class="line">return ret;</span><br><span class="line"></span><br><span class="line">while ((tag = av_dict_get(fmt_ctx-&gt;metadata, &quot;&quot;, tag, AV_DICT_IGNORE_SUFFIX)))</span><br><span class="line">printf(&quot;%s=%s\n&quot;, tag-&gt;key, tag-&gt;value);</span><br><span class="line"></span><br><span class="line">avformat_close_input(&amp;fmt_ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/ffmpeg%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94test%E7%BB%93%E6%9E%9C.png?raw=true" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure></p><p>至此，开发环境已就位。</p><p>参考：<a href="http://blog.csdn.net/spaceyqy/article/details/43115391" target="_blank" rel="noopener">vs2013+ffmpeg开发环境搭建</a></p><p>资料：<a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977#comments" target="_blank" rel="noopener">FFMPEG视音频编解码零基础学习方法</a><br><a href="http://ffmpeg.org/documentation.html" target="_blank" rel="noopener">ffmpeg官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1519277154249&amp;di=8b9a60a72da8a1979c84f0f3bd11dfc1&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1768997415%2C378959485%26fm%3D214%26gp%3D0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;VS2013+ffmpeg开发环境搭建。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="ffmpeg" scheme="https://hubojing.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>联想Y400拆机</title>
    <link href="https://hubojing.github.io/2018/02/20/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA/"/>
    <id>https://hubojing.github.io/2018/02/20/联想Y400拆机/</id>
    <published>2018-02-20T07:48:29.000Z</published>
    <updated>2018-02-20T10:40:50.853Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519130696277&di=44a7bcb7af8244e6e2c2f8ca5c95c8f9&imgtype=jpg&src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D3592072107%2C2343326581%26fm%3D214%26gp%3D0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>记一次失败的拆机T_T</strong><br><br><br> </div><a id="more"></a><p>　　根源：笔记本卡慢，想加一块ssd和一根内存。（其实就是想看看里面长啥样）</p><p>　　过程：不停卸螺丝。。。。。。不停扒壳子。。。。。。不停清灰！</p><p>　　咳咳，四年没有清过灰<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E8%83%8C%E9%9D%A2.jpg?raw=true" alt="背面" title="">                </div>                <div class="image-caption">背面</div>            </figure></p><p>　　打开后盖<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%86%85%E9%83%A8.jpg?raw=true" alt="整体结构" title="">                </div>                <div class="image-caption">整体结构</div>            </figure></p><p>　　拿下内存条，原装配的是DDR3 4G。所以是再加一根4G呢，还是干脆换一根8G呢<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%E6%9D%A1.jpg?raw=true" alt="内存条" title="">                </div>                <div class="image-caption">内存条</div>            </figure></p><p>　　可以加2根内存条，联想Y400预留了一个mSATA接口，可以加装mSATA接口的SSD。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%E5%92%8Cssd.jpg?raw=true" alt="内存和ssd" title="">                </div>                <div class="image-caption">内存和ssd</div>            </figure></p><p>　　好贵啊啊啊啊啊啊啊啊啊啊啊啊<br><a href="https://item.jd.com/3749477.html" target="_blank" rel="noopener">https://item.jd.com/3749477.html</a></p><p>　　原装三星硬盘，据说现在被希捷收购了。硬盘盒上有一层防静电锡纸。没拍的D面盖板上也有薄薄的铝板，起电磁屏蔽作用。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E7%A1%AC%E7%9B%98.jpg?raw=true" alt="硬盘" title="">                </div>                <div class="image-caption">硬盘</div>            </figure></p><p>　　光驱，莫名其妙的坏掉了……没修好<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%85%89%E9%A9%B1.jpg?raw=true" alt="光驱" title="">                </div>                <div class="image-caption">光驱</div>            </figure></p><p>　　看向光驱位内部，可以看到常规接口<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%85%89%E9%A9%B1%E5%86%85%E9%83%A8.jpg?raw=true" alt="接口" title="">                </div>                <div class="image-caption">接口</div>            </figure></p><p>　　到处还有一些防震海绵，绝缘胶布，整体而言还是比较干净整洁的。但是，屏幕转轴很容易断啊。打开后盖，转轴就是碎的……我整了好久才让笔记本屏幕能正常打开，但已经不能灵活合上盖子了。就是这样：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%B1%8F%E5%B9%95%E8%BD%AC%E8%BD%B4.jpg?raw=true" alt="机械故障" title="">                </div>                <div class="image-caption">机械故障</div>            </figure><br>问题出在<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%81%94%E6%83%B3Y400%E6%8B%86%E6%9C%BA%E2%80%94%E2%80%94%E5%B1%8F%E8%BD%B4.png?raw=true" alt="屏轴" title="">                </div>                <div class="image-caption">屏轴</div>            </figure></p><p>　　由于固定它的塑料壳碎了，转动屏幕它就自由转动，抵到后方的电路板，估计抵坏了左侧音响的音频放大部分电路。一开始直接没声了，倒腾半天有声音了，然后让杂音消了，但声音不能正常放大了。</p><p>　　无知者无畏，秉着玩跨了再拼回去的探索精神，本打算都给拆了的。然而螺丝不给面子，滑丝打不开……………………连风扇的螺丝都没找到合适规格的十字口螺丝刀拧开。看来干不了维修→_→失败的拆机，基本就没有拆……忽悠你们点进来</p><p>　　拼回去了还能用，还可以，除了我的JBL专业音响T_T。清灰效果不明显啊，还是要一键还原啊。希望小Y再坚持几年不垮</p><p>　　好了不拆了！弄得一手灰╭(╯^╰)╮谁和我组队打个游戏赢几盘排解一下</p><p>　　附一篇<a href="http://nb.zol.com.cn/337/3374073.html" target="_blank" rel="noopener">正儿八经的拆机</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1519130696277&amp;di=44a7bcb7af8244e6e2c2f8ca5c95c8f9&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D3592072107%2C2343326581%26fm%3D214%26gp%3D0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;记一次失败的拆机T_T&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="通信工程" scheme="https://hubojing.github.io/categories/%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="硬件" scheme="https://hubojing.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="拆机" scheme="https://hubojing.github.io/tags/%E6%8B%86%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>公告</title>
    <link href="https://hubojing.github.io/2018/02/19/%E5%85%AC%E5%91%8A/"/>
    <id>https://hubojing.github.io/2018/02/19/公告/</id>
    <published>2018-02-18T16:40:50.000Z</published>
    <updated>2018-03-30T15:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519130846687&di=d0a3a597ccffeaff65b2e3eeb22cf389&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170929%2F818198511153441585d8013421e01fea.jpeg" width="300" height="180" style="float:right;"><br>　　<strong>本博客域名还原为<a href="https://hubojing.github.io/">https://hubojing.github.io/</a></strong><br>　　小博客点击一万五啦(づ￣ 3￣)づ，谢谢各位的来访。<br>  　　<br>    　　<br> </div><a id="more"></a><p>　　域名<a href="http://hubojing.me/" target="_blank" rel="noopener">http://hubojing.me/</a> 已弃用。由于更换域名，原有每篇文章浏览量被清空。<br>　　特此公告。<br>　　(～￣▽￣)～　　</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1519130846687&amp;di=d0a3a597ccffeaff65b2e3eeb22cf389&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170929%2F818198511153441585d8013421e01fea.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;　　&lt;strong&gt;本博客域名还原为&lt;a href=&quot;https://hubojing.github.io/&quot;&gt;https://hubojing.github.io/&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;　　小博客点击一万五啦(づ￣ 3￣)づ，谢谢各位的来访。&lt;br&gt;  　　&lt;br&gt;    　　&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://hubojing.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://hubojing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV3.4.0编译</title>
    <link href="https://hubojing.github.io/2018/01/28/OpenCV3-4-0%E7%BC%96%E8%AF%91/"/>
    <id>https://hubojing.github.io/2018/01/28/OpenCV3-4-0编译/</id>
    <published>2018-01-28T14:18:39.000Z</published>
    <updated>2018-01-30T14:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1517760219&di=39b7b7cc2c84d7dd42bf4db67fa2cd4e&imgtype=jpg&er=1&src=http%3A%2F%2Fpic.baike.soso.com%2Fp%2F20140221%2Fbki-20140221032221-753276011.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>OpenCV文件编译及问题记录。</strong><br><br><br> </div><a id="more"></a><p>目前最新OpenCV官网发布最新版为3.4.0（2017年12月23日发布）。</p><h1 id="OpenCV库使用方法"><a href="#OpenCV库使用方法" class="headerlink" title="OpenCV库使用方法"></a>OpenCV库使用方法</h1><p>下载地址：<a href="https://github.com/opencv/opencv/releases/tag/3.4.0" target="_blank" rel="noopener">https://github.com/opencv/opencv/releases/tag/3.4.0</a><br>或<br><a href="https://sourceforge.net/projects/opencvlibrary/" target="_blank" rel="noopener">https://sourceforge.net/projects/opencvlibrary/</a></p><h2 id="法一：使用官方提供的已编译好的文件"><a href="#法一：使用官方提供的已编译好的文件" class="headerlink" title="法一：使用官方提供的已编译好的文件"></a>法一：使用官方提供的已编译好的文件</h2><p>优点：方便快捷<br>缺点：版本限制<br>选择opencv-3.4.0-vc14_vc15.exe，下载完成后可以直接打开解压，即可在自己的项目中直接使用。<br>具体步骤为：</p><ol><li><p>配置环境变量<br>打开电脑右键属性-高级系统设置-环境变量，Path中新增：E:\opencv\build\x64\vc14\bin，（此处为解压对应目录）。</p></li><li><p>引入相应头文件、库文件、链接库<br>打开自己的工程，右键属性-配置属性-VC++目录-包含目录，新增：<br>E:\opencv\build\include\opencv<br>E:\opencv\build\include\opencv2<br>E:\opencv\build\include</p></li></ol><p>库目录，新增：<br>E:\opencv\build\x64\vc14\lib<br>（注意修改为你解压对应的目录）。</p><p>链接器-输入-附加依赖项，新增：<br>opencv_world340d.lib<br>点击确定即可。<br>至此所有准备工作就绪，可以愉快地编译自己的工程啦。</p><p>但想如此一劳永逸解决问题，需符合以下特点：你的VS版本是VC14（2015）或VC15（2017）。<br>另附几种对应关系：<br>Microsoft Visual Studio 6.0:          VC6.0<br>Microsoft Visual Studio 2002：          VC7.0<br>Microsoft Visual Studio 2003：        VC7.1<br>Microsoft Visual Studio 2005：           VC8.0<br>Microsoft Visual Studio 2008：        VC9.0<br>Microsoft Visual Studio 2010：        VC10.0<br>Microsoft Visual Studio 2012：        VC11.0<br>Microsoft Visual Studio 2013：        VC12.0<br>Microsoft Visual Studio 2014：        VC13.0<br>Microsoft Visual Studio 2015：        VC14.0<br>Microsoft Visual studio 2017：         VC15.0</p><p>由于我使用VS2013，因此无法使用该方法。（当然，可以自行下载VS2015的运行库）。<br>我使用法二。</p><h2 id="法二：自行编译"><a href="#法二：自行编译" class="headerlink" title="法二：自行编译"></a>法二：自行编译</h2><h3 id="下载源码Source-code并解压"><a href="#下载源码Source-code并解压" class="headerlink" title="下载源码Source code并解压"></a>下载源码Source code并解压</h3><h3 id="下载CMake"><a href="#下载CMake" class="headerlink" title="下载CMake"></a>下载CMake</h3><p>下载地址：<a href="https://cmake.org/download/" target="_blank" rel="noopener">https://cmake.org/download/</a><br>选择相应操作系统版本，例如我选择Windows win64-x64 Installer。安装，打开bin\cmake-gui.exe。</p><h3 id="使用CMake"><a href="#使用CMake" class="headerlink" title="使用CMake"></a>使用CMake</h3><p>在Where is the source code中选择OpenCV解压目录，如：E:/opencv-3.4.0/opencv-3.4.0。<br>一般可以在解压目录下新建一个build文件夹，用来存放编译生成的文件。<br>于是，在Where to build the binaries中填入该路径，如：E:/opencv-3.4.0/opencv-3.4.0/build。（也可自行选择路径）</p><p>点击Configure，选择所需环境，如：Visual Studio 12 2013。进入漫长的等待。<br>如果区域有红色出现，需再次点击Configure，直到全部变成白色。</p><p>第一次Configure后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">General configuration for OpenCV 3.4.0 =====================================</span><br><span class="line">  Version control:               unknown</span><br><span class="line"></span><br><span class="line">  Platform:</span><br><span class="line">    Timestamp:                   2018-01-29T14:29:24Z</span><br><span class="line">    Host:                        Windows 10.0.16299 AMD64</span><br><span class="line">    CMake:                       3.10.2</span><br><span class="line">    CMake generator:             Visual Studio 12 2013</span><br><span class="line">    CMake build tool:            C:/Program Files (x86)/MSBuild/12.0/bin/MSBuild.exe</span><br><span class="line">    MSVC:                        1800</span><br><span class="line"></span><br><span class="line">  CPU/HW features:</span><br><span class="line">    Baseline:                    SSE SSE2</span><br><span class="line">      requested:                 SSE2</span><br><span class="line">    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX</span><br><span class="line">      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2</span><br><span class="line">      SSE4_1 (3 files):          + SSE3 SSSE3 SSE4_1</span><br><span class="line">      SSE4_2 (1 files):          + SSE3 SSSE3 SSE4_1 POPCNT SSE4_2</span><br><span class="line">      FP16 (2 files):            + SSE3 SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX</span><br><span class="line">      AVX (5 files):             + SSE3 SSSE3 SSE4_1 POPCNT SSE4_2 AVX</span><br><span class="line"></span><br><span class="line">  C/C++:</span><br><span class="line">    Built as dynamic libs?:      YES</span><br><span class="line">    C++11:                       YES</span><br><span class="line">    C++ Compiler:                C:/software/vs2013/VC/bin/cl.exe  (ver 18.0.21005.1)</span><br><span class="line">    C++ flags (Release):         /DWIN32 /D_WINDOWS /W4 /GR  /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi /fp:fast   /arch:SSE /arch:SSE2 /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /MP12  /MD /O2 /Ob2 /DNDEBUG  /Zi</span><br><span class="line">    C++ flags (Debug):           /DWIN32 /D_WINDOWS /W4 /GR  /EHa  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi /fp:fast   /arch:SSE /arch:SSE2 /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /MP12  /MDd /Zi /Ob0 /Od /RTC1 </span><br><span class="line">    C Compiler:                  C:/software/vs2013/VC/bin/cl.exe</span><br><span class="line">    C flags (Release):           /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi /fp:fast   /arch:SSE /arch:SSE2   /MP12  /MD /O2 /Ob2 /DNDEBUG  /Zi</span><br><span class="line">    C flags (Debug):             /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi /fp:fast   /arch:SSE /arch:SSE2   /MP12  /MDd /Zi /Ob0 /Od /RTC1 </span><br><span class="line">    Linker flags (Release):      /machine:X86  /INCREMENTAL:NO  /debug</span><br><span class="line">    Linker flags (Debug):        /machine:X86  /debug /INCREMENTAL </span><br><span class="line">    ccache:                      NO</span><br><span class="line">    Precompiled headers:         YES</span><br><span class="line">    Extra dependencies:</span><br><span class="line">    3rdparty dependencies:</span><br><span class="line"></span><br><span class="line">  OpenCV modules:</span><br><span class="line">    To be built:                 calib3d core dnn features2d flann highgui imgcodecs imgproc ml objdetect photo python_bindings_generator shape stitching superres ts video videoio videostab</span><br><span class="line">    Disabled:                    js world</span><br><span class="line">    Disabled by dependency:      -</span><br><span class="line">    Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python2 python3 viz</span><br><span class="line">    Applications:                tests perf_tests apps</span><br><span class="line">    Documentation:               NO</span><br><span class="line">    Non-free algorithms:         NO</span><br><span class="line"></span><br><span class="line">  Windows RT support:            NO</span><br><span class="line"></span><br><span class="line">  GUI: </span><br><span class="line">    Win32 UI:                    YES</span><br><span class="line">    VTK support:                 NO</span><br><span class="line"></span><br><span class="line">  Media I/O: </span><br><span class="line">    ZLib:                        build (ver 1.2.11)</span><br><span class="line">    JPEG:                        build (ver 90)</span><br><span class="line">    WEBP:                        build (ver encoder: 0x020e)</span><br><span class="line">    PNG:                         build (ver 1.6.34)</span><br><span class="line">    TIFF:                        build (ver 42 - 4.0.9)</span><br><span class="line">    JPEG 2000:                   build (ver 1.900.1)</span><br><span class="line">    OpenEXR:                     build (ver 1.7.1)</span><br><span class="line"></span><br><span class="line">  Video I/O:</span><br><span class="line">    Video for Windows:           YES</span><br><span class="line">    DC1394:                      NO</span><br><span class="line">    FFMPEG:                      NO</span><br><span class="line">      avcodec:                   NO</span><br><span class="line">      avformat:                  NO</span><br><span class="line">      avutil:                    NO</span><br><span class="line">      swscale:                   NO</span><br><span class="line">      avresample:                NO</span><br><span class="line">    GStreamer:                   NO</span><br><span class="line">    DirectShow:                  YES</span><br><span class="line"></span><br><span class="line">  Parallel framework:            Concurrency</span><br><span class="line"></span><br><span class="line">  Trace:                         YES (with Intel ITT)</span><br><span class="line"></span><br><span class="line">  Other third-party libraries:</span><br><span class="line">    Lapack:                      NO</span><br><span class="line">    Eigen:                       NO</span><br><span class="line">    Custom HAL:                  NO</span><br><span class="line"></span><br><span class="line">  NVIDIA CUDA:                   NO</span><br><span class="line"></span><br><span class="line">  OpenCL:                        YES (no extra features)</span><br><span class="line">    Include path:                E:/opencv-3.4.0/opencv-3.4.0/3rdparty/include/opencl/1.2</span><br><span class="line">    Link libraries:              Dynamic load</span><br><span class="line"></span><br><span class="line">  Python (for build):            NO</span><br><span class="line"></span><br><span class="line">  Java:</span><br><span class="line">    ant:                         NO</span><br><span class="line">    JNI:                         NO</span><br><span class="line">    Java wrappers:               NO</span><br><span class="line">    Java tests:                  NO</span><br><span class="line"></span><br><span class="line">  Matlab:                        NO</span><br><span class="line"></span><br><span class="line">  Install to:                    E:/opencv-3.4.0/opencv-3.4.0/build/install</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Configuring done</span><br></pre></td></tr></table></figure></p><p>此时可能出现常见问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FFMPEG: Download: opencv_ffmpeg.dll</span><br><span class="line">CMake Warning at cmake/OpenCVDownload.cmake:190 (message):</span><br><span class="line">  FFMPEG: Download failed: 28;&quot;Timeout was reached&quot;</span><br><span class="line"></span><br><span class="line">FFMPEG: Download: opencv_ffmpeg_64.dll</span><br><span class="line">CMake Warning at cmake/OpenCVDownload.cmake:190 (message):</span><br><span class="line">  FFMPEG: Download failed: 28;&quot;Timeout was reached&quot;</span><br><span class="line"></span><br><span class="line">IPPICV: Download: ippicv_2017u3_win_ia32_general_20170822.zip</span><br><span class="line">CMake Warning at cmake/OpenCVDownload.cmake:190 (message):</span><br><span class="line">  IPPICV: Download failed: 28;&quot;Timeout was reached&quot;</span><br></pre></td></tr></table></figure></p><p> 总之就是有文件下载不成功。根据CMake的提示，打开build下的CMakeDownloadLog.txt，上面写着：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">use_cache &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache&quot;</span><br><span class="line">do_copy &quot;opencv_ffmpeg.dll&quot; &quot;3ae76b105113d944984b2351c61e21c6&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg.dll&quot; &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg&quot;</span><br><span class="line">#missing &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg/opencv_ffmpeg.dll&quot;</span><br><span class="line">#check_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/3ae76b105113d944984b2351c61e21c6-opencv_ffmpeg.dll&quot;</span><br><span class="line">#mismatch_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/3ae76b105113d944984b2351c61e21c6-opencv_ffmpeg.dll&quot; &quot;299b46e2c4cf8047b0ef420c9a61c6ef&quot;</span><br><span class="line">#delete &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/3ae76b105113d944984b2351c61e21c6-opencv_ffmpeg.dll&quot;</span><br><span class="line">#cmake_download &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/3ae76b105113d944984b2351c61e21c6-opencv_ffmpeg.dll&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg.dll&quot;</span><br><span class="line">do_copy &quot;opencv_ffmpeg_64.dll&quot; &quot;cf3bb5bc9d393b022ea7a42eb63e794d&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg_64.dll&quot; &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg&quot;</span><br><span class="line">#missing &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg/opencv_ffmpeg_64.dll&quot;</span><br><span class="line">#check_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/cf3bb5bc9d393b022ea7a42eb63e794d-opencv_ffmpeg_64.dll&quot;</span><br><span class="line">#mismatch_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/cf3bb5bc9d393b022ea7a42eb63e794d-opencv_ffmpeg_64.dll&quot; &quot;3ab964d23e60d2b961737a8bb556bd45&quot;</span><br><span class="line">#delete &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/cf3bb5bc9d393b022ea7a42eb63e794d-opencv_ffmpeg_64.dll&quot;</span><br><span class="line">#cmake_download &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ffmpeg/cf3bb5bc9d393b022ea7a42eb63e794d-opencv_ffmpeg_64.dll&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg_64.dll&quot;</span><br><span class="line">do_copy &quot;ffmpeg_version.cmake&quot; &quot;ec59008da403fb18ab3c1ed66aed583b&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/ffmpeg_version.cmake&quot; &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg&quot;</span><br><span class="line">#check_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg/ffmpeg_version.cmake&quot;</span><br><span class="line">#match_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg/ffmpeg_version.cmake&quot; &quot;ec59008da403fb18ab3c1ed66aed583b&quot;</span><br><span class="line">do_unpack &quot;ippicv_2017u3_win_ia32_general_20170822.zip&quot; &quot;8a7680ae352c192de2e2e34936164bd0&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/dfe3162c237af211e98b8960018b564bc209261d/ippicv/ippicv_2017u3_win_ia32_general_20170822.zip&quot; &quot;E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ippicv&quot;</span><br><span class="line">#check_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ippicv/8a7680ae352c192de2e2e34936164bd0-ippicv_2017u3_win_ia32_general_20170822.zip&quot;</span><br><span class="line">#mismatch_md5 &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ippicv/8a7680ae352c192de2e2e34936164bd0-ippicv_2017u3_win_ia32_general_20170822.zip&quot; &quot;c7fcfb626b50daa8bd728b7598328455&quot;</span><br><span class="line">#delete &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ippicv/8a7680ae352c192de2e2e34936164bd0-ippicv_2017u3_win_ia32_general_20170822.zip&quot;</span><br><span class="line">#cmake_download &quot;E:/opencv-3.4.0/opencv-3.4.0/.cache/ippicv/8a7680ae352c192de2e2e34936164bd0-ippicv_2017u3_win_ia32_general_20170822.zip&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/dfe3162c237af211e98b8960018b564bc209261d/ippicv/ippicv_2017u3_win_ia32_general_20170822.zip&quot;</span><br></pre></td></tr></table></figure></p><p><del>可以看到文本中记录了下载链接，于是在浏览器中复制上述链接，自行下载好这几个文件到文本指向的路径中。<br>比如：我缺的三个文件是：<br>opencv_ffmpeg.dll，需放到：E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg。<br>下载链接：<a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg.dll" target="_blank" rel="noopener">https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg.dll</a><br>opencv_ffmpeg_64.dll，需放到：E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ffmpeg。<br>下载链接：<br><a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg_64.dll" target="_blank" rel="noopener">https://raw.githubusercontent.com/opencv/opencv_3rdparty/66b1fed06cf3510235f367f96aa26da5cb234a15/ffmpeg/opencv_ffmpeg_64.dll</a><br>ippicv_2017u3_win_ia32_general_20170822.zip，注意：需在压缩包前加上文件的hash值，即压缩名变为hash值-原名。提供一个在线查看哈希值的网站：<a href="http://www.atool.org/file_hash.php" target="_blank" rel="noopener">http://www.atool.org/file_hash.php</a> ，需要的是MD5 Hash。<br>需放到：E:/opencv-3.4.0/opencv-3.4.0/build/3rdparty/ippicv。（然而并没有生成ippicv文件夹）<br>下载链接：<br><a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/dfe3162c237af211e98b8960018b564bc209261d/ippicv/ippicv_2017u3_win_ia32_general_20170822.zip" target="_blank" rel="noopener">https://raw.githubusercontent.com/opencv/opencv_3rdparty/dfe3162c237af211e98b8960018b564bc209261d/ippicv/ippicv_2017u3_win_ia32_general_20170822.zip</a><br>建议科学上网后下载，不然网速感人。<br>不过还是不匹配。</del><br>根据大佬提示，CMake3.10.2没有downloader.cmake，干脆……不要这三个文件了……<br>修改E:\opencv-3.4.0\opencv-3.4.0\3rdparty\ffmpeg中的ffmpeg.cmake，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Binary branch name: ffmpeg/master_20171009</span><br><span class="line"># Binaries were created for OpenCV: 8ac2c5d620b467d3f22802e96c88ddde6da707af</span><br><span class="line">set(FFMPEG_BINARIES_COMMIT &quot;66b1fed06cf3510235f367f96aa26da5cb234a15&quot;)</span><br><span class="line">set(FFMPEG_FILE_HASH_BIN32 &quot;3ae76b105113d944984b2351c61e21c6&quot;)</span><br><span class="line">set(FFMPEG_FILE_HASH_BIN64 &quot;cf3bb5bc9d393b022ea7a42eb63e794d&quot;)</span><br><span class="line">set(FFMPEG_FILE_HASH_CMAKE &quot;ec59008da403fb18ab3c1ed66aed583b&quot;)</span><br><span class="line"></span><br><span class="line">function(download_win_ffmpeg script_var)</span><br><span class="line">  set($&#123;script_var&#125; &quot;&quot; PARENT_SCOPE)</span><br><span class="line"></span><br><span class="line">  # set(ids BIN32 BIN64 CMAKE)</span><br><span class="line">  # set(name_BIN32 &quot;opencv_ffmpeg.dll&quot;)</span><br><span class="line">  # set(name_BIN64 &quot;opencv_ffmpeg_64.dll&quot;)</span><br><span class="line">  # set(name_CMAKE &quot;ffmpeg_version.cmake&quot;)</span><br><span class="line"></span><br><span class="line">  # set(FFMPEG_DOWNLOAD_DIR &quot;$&#123;OpenCV_BINARY_DIR&#125;/3rdparty/ffmpeg&quot;)</span><br><span class="line"></span><br><span class="line">  # set(status TRUE)</span><br><span class="line">  # foreach(id $&#123;ids&#125;)</span><br><span class="line">    # ocv_download(FILENAME $&#123;name_$&#123;id&#125;&#125;</span><br><span class="line">               # HASH $&#123;FFMPEG_FILE_HASH_$&#123;id&#125;&#125;</span><br><span class="line">               # URL</span><br><span class="line">                 # &quot;$ENV&#123;OPENCV_FFMPEG_URL&#125;&quot;</span><br><span class="line">                 # &quot;$&#123;OPENCV_FFMPEG_URL&#125;&quot;</span><br><span class="line">                 # &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;FFMPEG_BINARIES_COMMIT&#125;/ffmpeg/&quot;</span><br><span class="line">               # DESTINATION_DIR $&#123;FFMPEG_DOWNLOAD_DIR&#125;</span><br><span class="line">               # ID FFMPEG</span><br><span class="line">               # RELATIVE_URL</span><br><span class="line">               # STATUS res)</span><br><span class="line">    # if(NOT res)</span><br><span class="line">      # set(status FALSE)</span><br><span class="line">    # endif()</span><br><span class="line">  # endforeach()</span><br><span class="line">  # if(status)</span><br><span class="line">    # set($&#123;script_var&#125; &quot;$&#123;FFMPEG_DOWNLOAD_DIR&#125;/ffmpeg_version.cmake&quot; PARENT_SCOPE)</span><br><span class="line">  # endif()</span><br><span class="line">endfunction()</span><br></pre></td></tr></table></figure></p><p>修改E:\opencv-3.4.0\opencv-3.4.0\3rdparty\ippicv中的ippicv.cmake，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">function(download_ippicv root_var)</span><br><span class="line">  # set($&#123;root_var&#125; &quot;&quot; PARENT_SCOPE)</span><br><span class="line"></span><br><span class="line">  # # Commit SHA in the opencv_3rdparty repo</span><br><span class="line">  # set(IPPICV_COMMIT &quot;dfe3162c237af211e98b8960018b564bc209261d&quot;)</span><br><span class="line">  # # Define actual ICV versions</span><br><span class="line">  # if(APPLE)</span><br><span class="line">    # set(OPENCV_ICV_PLATFORM &quot;macosx&quot;)</span><br><span class="line">    # set(OPENCV_ICV_PACKAGE_SUBDIR &quot;ippicv_mac&quot;)</span><br><span class="line">    # if(X86_64)</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_mac_intel64_general_20170822.tgz&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;c1ebb5dfa5b7f54b0c44e1917805a463&quot;)</span><br><span class="line">    # else()</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_mac_ia32_general_20170822.tgz&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;49b05a669042753ae75895a445ebd612&quot;)</span><br><span class="line">    # endif()</span><br><span class="line">  # elseif((UNIX AND NOT ANDROID) OR (UNIX AND ANDROID_ABI MATCHES &quot;x86&quot;))</span><br><span class="line">    # set(OPENCV_ICV_PLATFORM &quot;linux&quot;)</span><br><span class="line">    # set(OPENCV_ICV_PACKAGE_SUBDIR &quot;ippicv_lnx&quot;)</span><br><span class="line">    # if(X86_64)</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_lnx_intel64_general_20170822.tgz&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;4e0352ce96473837b1d671ce87f17359&quot;)</span><br><span class="line">    # else()</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_lnx_ia32_general_20170822.tgz&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;dcdb0ba4b123f240596db1840cd59a76&quot;)</span><br><span class="line">    # endif()</span><br><span class="line">  # elseif(WIN32 AND NOT ARM)</span><br><span class="line">    # set(OPENCV_ICV_PLATFORM &quot;windows&quot;)</span><br><span class="line">    # set(OPENCV_ICV_PACKAGE_SUBDIR &quot;ippicv_win&quot;)</span><br><span class="line">    # if(X86_64)</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_win_intel64_general_20170822.zip&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;0421e642bc7ad741a2236d3ec4190bdd&quot;)</span><br><span class="line">    # else()</span><br><span class="line">      # set(OPENCV_ICV_NAME &quot;ippicv_2017u3_win_ia32_general_20170822.zip&quot;)</span><br><span class="line">      # set(OPENCV_ICV_HASH &quot;8a7680ae352c192de2e2e34936164bd0&quot;)</span><br><span class="line">    # endif()</span><br><span class="line">  # else()</span><br><span class="line">    # return()</span><br><span class="line">  # endif()</span><br><span class="line"></span><br><span class="line">  # set(THE_ROOT &quot;$&#123;OpenCV_BINARY_DIR&#125;/3rdparty/ippicv&quot;)</span><br><span class="line">  # ocv_download(FILENAME $&#123;OPENCV_ICV_NAME&#125;</span><br><span class="line">               # HASH $&#123;OPENCV_ICV_HASH&#125;</span><br><span class="line">               # URL</span><br><span class="line">                 # &quot;$&#123;OPENCV_IPPICV_URL&#125;&quot;</span><br><span class="line">                 # &quot;$ENV&#123;OPENCV_IPPICV_URL&#125;&quot;</span><br><span class="line">                 # &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/$&#123;IPPICV_COMMIT&#125;/ippicv/&quot;</span><br><span class="line">               # DESTINATION_DIR &quot;$&#123;THE_ROOT&#125;&quot;</span><br><span class="line">               # ID IPPICV</span><br><span class="line">               # STATUS res</span><br><span class="line">               # UNPACK RELATIVE_URL)</span><br><span class="line"></span><br><span class="line">  # if(res)</span><br><span class="line">    # set($&#123;root_var&#125; &quot;$&#123;THE_ROOT&#125;/$&#123;OPENCV_ICV_PACKAGE_SUBDIR&#125;&quot; PARENT_SCOPE)</span><br><span class="line">  # endif()</span><br><span class="line">endfunction()</span><br></pre></td></tr></table></figure></p><p>再重新Configure两次，Generate一次，成功。</p><h3 id="用VS2013编译"><a href="#用VS2013编译" class="headerlink" title="用VS2013编译"></a>用VS2013编译</h3><p>打开OpenCV.sln编译，debug-Win32调试器。</p><h3 id="添加到所需工程"><a href="#添加到所需工程" class="headerlink" title="添加到所需工程"></a>添加到所需工程</h3><p>根据法一：<br>添加环境变量：<br>E:\opencv-3.4.0\opencv-3.4.0\build\install\x86\vc12\bin<br>VS包含目录：E:\opencv-3.4.0\opencv-3.4.0\build\install\include<br>E:\opencv-3.4.0\opencv-3.4.0\build\install\include\opencv<br>E:\opencv-3.4.0\opencv-3.4.0\build\install\include\opencv2<br>库目录：<br>E:\opencv-3.4.0\opencv-3.4.0\build\install\x86\vc12\lib<br>链接器：<br>opencv_calib3d340d.lib<br>opencv_core340d.lib<br>opencv_dnn340d.lib<br>opencv_features2d340d.lib<br>opencv_flann340d.lib<br>opencv_highgui340d.lib<br>opencv_imgcodecs340d.lib<br>opencv_imgproc340d.lib<br>opencv_ml340d.lib<br>opencv_objdetect340d.lib<br>opencv_photo340d.lib<br>opencv_shape340d.lib<br>opencv_stitching340d.lib<br>opencv_superres340d.lib<br>opencv_video340d.lib<br>opencv_videoio340d.lib<br>opencv_videostab340d.lib</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>比较两张图片的不同之处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cv.h&gt;  </span><br><span class="line">#include &lt;highgui.h&gt;  </span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">IplImage *pSrc = cvLoadImage(&quot;1.jpg&quot;, 1);</span><br><span class="line">CvSize size = cvSize(600, 376);//区域大小  </span><br><span class="line">cvSetImageROI(pSrc, cvRect(0, 0, size.width, size.height));//设置源图像ROI  </span><br><span class="line">IplImage* pDest1 = cvCreateImage(size, pSrc-&gt;depth, pSrc-&gt;nChannels);//创建目标图像  </span><br><span class="line">cvCopy(pSrc, pDest1); //复制图像  </span><br><span class="line">cvResetImageROI(pDest1);//源图像用完后，清空ROI  </span><br><span class="line">cvSaveImage(&quot;Image_1.jpg&quot;, pDest1);//保存目标图像  </span><br><span class="line">cvSetImageROI(pSrc, cvRect(0, 393, size.width, size.height));//设置源图像ROI  </span><br><span class="line">IplImage* pDest2 = cvCreateImage(size, pSrc-&gt;depth, pSrc-&gt;nChannels);//创建目标图像  </span><br><span class="line">cvCopy(pSrc, pDest2); //复制图像  </span><br><span class="line">cvResetImageROI(pDest2);//源图像用完后，清空ROI  </span><br><span class="line">cvSaveImage(&quot;Image_2.jpg&quot;, pDest2);//保存目标图像  </span><br><span class="line">IplImage *dst;</span><br><span class="line">dst = cvCreateImage(cvGetSize(pDest1), pDest1-&gt;depth, pDest1-&gt;nChannels);</span><br><span class="line">cvAbsDiff(pDest1, pDest2, dst);</span><br><span class="line">cvNamedWindow(&quot;Compare_Images&quot;, 1);</span><br><span class="line">cvShowImage(&quot;Compare_Images&quot;, dst);</span><br><span class="line">cvWaitKey();</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上程序转自<a href="http://blog.csdn.net/cooelf/article/details/24663097" target="_blank" rel="noopener">http://blog.csdn.net/cooelf/article/details/24663097</a></p><p>可成功编译和运行，到此，基础环境算是磕磕绊绊搭建好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1517760219&amp;di=39b7b7cc2c84d7dd42bf4db67fa2cd4e&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic.baike.soso.com%2Fp%2F20140221%2Fbki-20140221032221-753276011.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;OpenCV文件编译及问题记录。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="https://hubojing.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>微信自动跳一跳</title>
    <link href="https://hubojing.github.io/2018/01/06/%E5%BE%AE%E4%BF%A1%E8%87%AA%E5%8A%A8%E8%B7%B3%E4%B8%80%E8%B7%B3/"/>
    <id>https://hubojing.github.io/2018/01/06/微信自动跳一跳/</id>
    <published>2018-01-06T09:03:53.000Z</published>
    <updated>2018-01-14T15:43:45.125Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img.blog.csdn.net/20180114234316674?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVib2ppbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="300" height="180" style="float:right;"><br><br><br>　　<strong>技术探讨微信跳一跳自动实现（C++版）。</strong><br><br><br> </div><a id="more"></a><p>免责声明：请勿用于刷分，由此导致的分数被屏蔽、微信被封号后果自负。</p><p>近来微信跳一跳很火，手动玩的最高纪录才150分，而最常见的情况是10分以内就挂，由此萌生了是否能技术实现的想法。当然，对刷分并不感兴趣，只是想学习下各位大佬们的代码。知乎上这个话题已经炸开了锅，python版满天飞，这里是一个C++实现。（物理外挂简直丧心病狂(〝▼皿▼)）</p><p>适用范围：Android</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="借助adb"><a href="#借助adb" class="headerlink" title="借助adb"></a>借助adb</h2><p>电脑通过 adb 与Android手机互联。<br>为了捕捉屏幕信息，需要截图：<code>adb shell screencap -p 图片路径</code><br>借助<code>adb pull 图片路径</code>提交到本地。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ADBHelper::CapScreen()</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">"adb shell screencap -p /sdcard/JumpByJump.png"</span>);</span><br><span class="line">system(<span class="string">"adb pull /sdcard/JumpByJump.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模拟滑动事件<code>adb shell input swipe x1 y1 x2 y2 time</code>，即从点[x1,y1]滑动到点[x2,y2]，以及滑动时间（或者说是这儿的触摸时间）。这里我们不需要滑动到别处，因此可设置定点。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ADBHelper::jump(<span class="keyword">int</span> pressTime)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">sprintf_s(cmd, <span class="string">"adb shell input swipe 320 410 320 410 %d"</span>, pressTime);</span><br><span class="line">system(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="计算距离"><a href="#计算距离" class="headerlink" title="计算距离"></a>计算距离</h2><p>根据勾股定理，计算棋子目前所处位置到下一点（方块中心）的距离。所以就需要考虑如何获取当前位置和目标点坐标。这也是该技术探讨的<strong>核心所在</strong>。这里用到了OpenCV库来识别位置。（当初OpenCV、OpenGL傻傻分不清）</p><h3 id="最傻瓜"><a href="#最傻瓜" class="headerlink" title="最傻瓜"></a>最傻瓜</h3><p>手动点击棋子位置和目标位置，获取坐标。</p><p>优点：思路简单，准确度还可以。<br>缺点：操作麻烦，需手动跟进目标，自动化程度低。</p><h3 id="稍改进"><a href="#稍改进" class="headerlink" title="稍改进"></a>稍改进</h3><p>自动获取棋子位置，利用棋子颜色和方块较大的色差来做文章是很多帖子的思路。<br>然后手动点击目标位置。</p><p>较上述方案点击次数减少一半，但依然麻烦。</p><h3 id="比较好"><a href="#比较好" class="headerlink" title="比较好"></a>比较好</h3><p>利用图像处理知识，自动获取两点坐标。<br>如果想自动获取坐标，可以看到，立方体的性状是正方体和圆柱居多，立方体只需记录最上方和最右方的点的位置，取最上方的横坐标和最右方的纵坐标即得中心点坐标。<br>其它很多算法下方链接已附。</p><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>神经网络截取样本进行训练，然后让其自动跳跳跳。</p><p>暂时只实现了前2种……</p><h2 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h2><p>可以发现触摸时间越长，跳动距离越远。最简单的假设就是线性关系。distance=time<em>k=distance</em>(1/k)，令1/k=parameter，即所需参数。我们经测试显示，parameter值在本程序和手机环境（分辨率1920×1080）中1.15比较合适。通过设置参数，计算出触摸时间。</p><h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><p>代码主体建立在参考里的jump1jump项目（借用了adb、cv库和相关的dll），进行了一些修改。</p><p>入口<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JumpByJump jumper;</span><br><span class="line">jumper.CarryOut();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JumpByJump是主要的处理类，定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumpByJump</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JumpByJump();</span><br><span class="line">~JumpByJump();</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> m_parameter;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CarryOut</span><span class="params">()</span></span>;<span class="comment">//执行操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadImage</span><span class="params">()</span></span>;<span class="comment">//读取截图</span></span><br><span class="line"><span class="function">CvPoint<span class="title">LocateChess</span><span class="params">()</span></span>;<span class="comment">//棋子定位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowScreen</span><span class="params">()</span></span>;<span class="comment">//刷新屏幕</span></span><br><span class="line"><span class="keyword">double</span> m_targetPosX;</span><br><span class="line"><span class="keyword">double</span> m_targetPosY;</span><br><span class="line"><span class="keyword">double</span> m_sourcePosX;</span><br><span class="line"><span class="keyword">double</span> m_sourcePosY;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IplImage*m_image;</span><br><span class="line">IplImage*m_imgChessModel;</span><br><span class="line">IplImage*m_matchResult;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>第一次鼠标点击回调函数，获取棋子坐标-&gt;第一次鼠标点击回调函数，获取目标点坐标-&gt;计算两点距离-&gt;调用adb模拟触摸跳跃-&gt;等待截图-&gt;捕捉屏幕-&gt;读取截图-&gt;显示在电脑屏幕上<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>* param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event != CV_EVENT_LBUTTONUP)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">JumpByJump* jumper = (JumpByJump*)param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_iCount % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"棋子坐标："</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">jumper-&gt;m_sourcePosX = x;</span><br><span class="line">jumper-&gt;m_sourcePosY = y;</span><br><span class="line">m_iCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"目标点坐标："</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">jumper-&gt;m_targetPosX = x;</span><br><span class="line">jumper-&gt;m_targetPosY = y;</span><br><span class="line"><span class="comment">// CvPoint chessLoc = jumper-&gt;LocateChess();</span></span><br><span class="line"><span class="keyword">double</span> distance = <span class="built_in">sqrt</span>(powf(jumper-&gt;m_targetPosX - jumper-&gt;m_sourcePosX, <span class="number">2</span>) + powf(jumper-&gt;m_targetPosY - jumper-&gt;m_sourcePosY, <span class="number">2</span>));</span><br><span class="line">ADBHelper::jump(distance * m_parameter);</span><br><span class="line">Sleep(<span class="number">1000</span>);<span class="comment">//等待截图</span></span><br><span class="line">ADBHelper::CapScreen();</span><br><span class="line">jumper-&gt;ReadImage();</span><br><span class="line">jumper-&gt;ShowScreen();</span><br><span class="line">m_iCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行函数:捕捉屏幕-&gt;读取截图-&gt;获取棋子坐标-&gt;电脑显示模拟画面-&gt;刷新画面<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> JumpByJump::CarryOut()</span><br><span class="line">&#123;</span><br><span class="line">ADBHelper::CapScreen();</span><br><span class="line">ReadImage();</span><br><span class="line">UpdateScreen();</span><br><span class="line">cvWaitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cvWaitKey()函数的功能是不断刷新图像，频率时间为delay，单位为ms。</p><p>定位两点位置是核心关键。（手动设置两点则无需该函数）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CvPoint JumpByJump::LocateChess()</span><br><span class="line">&#123;</span><br><span class="line">cvMatchTemplate(m_image, m_imgChessModel, m_matchResult, CV_TM_SQDIFF);</span><br><span class="line"><span class="keyword">double</span> min_val = <span class="number">0</span>, max_val = <span class="number">0</span>;</span><br><span class="line">CvPoint min_loc, max_loc, chessPt;</span><br><span class="line">cvMinMaxLoc(m_matchResult, &amp;min_val, &amp;max_val, &amp;min_loc, &amp;max_loc);</span><br><span class="line">cvRectangle(m_image, min_loc, cvPoint(min_loc.x + m_imgChessModel-&gt;width, min_loc.y + m_imgChessModel-&gt;height), cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"棋子当前坐标："</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; min_loc.x &lt;&lt; <span class="string">","</span> &lt;&lt; min_loc.y&lt;&lt;<span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">chessPt = cvPoint(min_loc.x + m_imgChessModel-&gt;width / <span class="number">2</span>, min_loc.y + m_imgChessModel-&gt;height);</span><br><span class="line"><span class="keyword">return</span> chessPt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://blog.csdn.net/pinbodexiaozhu/article/details/45314725" target="_blank" rel="noopener">opencv 模板匹配(cvMatchTemplate)</a><br>模板匹配是通过在输入图像上滑动模板图像块对实际的图像块和输入图像进行匹配，并且可以利用函数cvMinMaxLoc()找到最佳匹配的位置。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>手动2点版<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20180114233902221?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVib2ppbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="控制台" title="">                </div>                <div class="image-caption">控制台</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20180114233931154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVib2ppbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="成绩" title="">                </div>                <div class="image-caption">成绩</div>            </figure></p><p>（最后点的时候手滑了…正常几百上千应该可以的）</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>所有工程文件和代码可在此处下载：<a href="https://github.com/hubojing/JumpByJump" target="_blank" rel="noopener">JumpByJump</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/mishang-aiofm/jump1jump" target="_blank" rel="noopener">jump1jump</a><br><a href="https://zhuanlan.zhihu.com/p/32643870" target="_blank" rel="noopener">人人都能看懂的“跳一跳”平民算法</a></p><p>附知乎热帖：<a href="https://www.zhihu.com/question/264829281" target="_blank" rel="noopener">怎样实现微信小游戏跳一跳的外挂？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180114234316674?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVib2ppbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;技术探讨微信跳一跳自动实现（C++版）。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="https://hubojing.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>神转折2017</title>
    <link href="https://hubojing.github.io/2017/12/31/%E7%A5%9E%E8%BD%AC%E6%8A%982017/"/>
    <id>https://hubojing.github.io/2017/12/31/神转折2017/</id>
    <published>2017-12-30T18:12:03.000Z</published>
    <updated>2017-12-30T19:11:57.700Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3657596153,515868233&fm=27&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>原来人生的转折点不必精心安排，它会以一种不经意的形式降临，不假思索甚至有些任性。</strong><br><br><br> </div><a id="more"></a><p>　　年末的这几天，看着学妹也登上学校的最高领奖台，由衷地高兴，时间总归是不会辜负努力的人。但就是这几天，她私信我考研后的不知所措和对未来的迷茫，突然觉得每个人的经历是何等的相似，我们都在走前人走过的路。去年此时，一边迎来的是周围的飘飘然的称赞和掌声，一边迎来的是无尽的未知和沉甸甸的思索。还记得自己在留下纪念照片时只附上了几个字：道阻且长。<br>　　人生总有几个关键时间点让我铭记，2017将是其中之一。<br>　　按照时间顺序，做个简单的梳理吧。由于这儿是技术博客，我尽量围绕技术相关的事情叙述。<br>　　这一年，我考研失败了。我曾经以为自己如果失败了，会非常矫情地大哭一场。然而事实是出奇地平静，仿佛只是微风吹皱了水面起了一点儿涟漪。然后人生就开始出现我从没预想到的变化……<br>　　作为一个理工科学生，自始至终我都将通信视作高端、复杂的代表，甚至有人把通信当信仰（这真是非常热爱了）。在大学四年里，我一直以为自己会按部就班的学习然后工作成为一名通信工程师……虽然在找工作以前，我从来没去真正了解过通信工程师的职责所在，我甚至不知道自己是否真正喜欢这一行，现在想来，真是too young too naive。直到考研结束后去就业市场逛了一逛，投了一波简历，参加了一些单位的面试。我不知道自己那时是否清楚了喜欢哪一行，但我明确知道了自己不喜欢哪些工作。印象最深的莫过于去某家事业单位应聘通信相关的工作，薪水颇高，起初听起来让人十分心动，父母也很有意愿。但毕竟是要把自己卖了，我怎么也得了解一下行情不是。查找了很多这方面的帖子，阅读了很多通信人的生涯。我突然发现这种工作和我心中的通信不太一样，我无法选择去过那种年纪轻轻就混吃等死的养老生活，没有追求，没有动力，没有发展，也不喜欢去深山老林实地勘测画图或者是夜半三更去蹲机房，感觉心中的通信神话一下子就跌入了深渊，这从不是我想要的生活。甚至因为自己不想去那家事业单位，前前后后和父母争辩过多次，最终慢慢让他们感受到了，我是认真的，他们也尊重我的想法。那段时间渐渐开始反复询问自己，到底喜欢什么。然后……画风就变了，简历求职意向再也看不到通信相关，取而代之是各种程序猿的工作。实事求是的说，一方面是IT业正当红，另一方面也是更重要的，我突然想起当年自己报志愿时第一志愿就是计算机专业，是临到最后两天，发现通信录取分数高于计算机专业感觉应该更好些，而当时以为通信就是计算机（所以论事先调研不妄自推测的重要性）而入了通信坑。四年里，曾有过对所学课程的质疑，但我一直将这种和兴趣有所偏离等价于没有理解知识本身的精髓。我还记得，其实当听到一种观点，通信工程约等于硬件，计算机专业约等于软件时，我就已经发现自己可能走错了，但正因有考研这个缓冲剂可以推迟这些考虑，让我心安理得地度过了这四年。<br>　　但我并不后悔和通信结缘的这四年，让我感觉自己反而是赚了，毕竟通信无处不在，而以后也能说一句，通信的那些我也是玩过的哟（此处是一个傲娇的表情）。通信将会一直是我心中高级和神圣的代名词。由于有通信工程的底子，我发现转入计算机真的不算太难。很多组成原理的知识，其实在通信工程里以微机原理甚至通信原理的形式出现了，而计算机网络、数据结构、数据库这些也都学过。而C语言的编程基础，总归还是有一些的。计算机三级当初自学的一些知识也很有用。其它的诸如matlab、Linux等课程的学习反而能增益自身。做一个了解硬件的软件工程师，也很酷。<br>　　六月，穿上学士服，我毕业了。机缘巧合，我来到现在的公司。</p><hr><p>　　工作带给我的震撼，从四月实习开始。<br>　　由于毕竟非科班出身，那时对开发的认识还非常浅薄。之前因为兴趣建立了这个博客，学习html、css、js，接触github，听说找工作最火的是java就跟风去学java，感觉app做出来成就感立显就把毕设定为app设计，可是怎么也想不到，最后竟然会去做C++开发，并且打算走下去。这真是从来没有出现在之前的人生规划里。有时候自己都要感谢自己找工作时任性了一把，完全不去想什么规划什么未来什么大公司什么稳定，只是选择一个有挑战、真正符合兴趣、能感到快乐的工作而已（好了我知道这其实也很难）。可能有时候不是在计划内才踏实，顺其自然佛系一点，也会有出其不意的惊喜。四月份实习时，从C++基础开始，当时刚接触MFC，我还去搜了一下这是个什么东东，后来网上一片人说这是个过时玩意儿，我当时很不解，那干嘛还学？学校图书馆甚至几乎借不到MFC字样的书（后来才知道，原来这属于VC范畴……）只有后来工作了一段时间，才慢慢开始体会其蕴含的思想，那么多公司至今还使用它不是没有道理的。<br>　　很巧也很幸运，从面试到实习到入组，有一个人见证我的成长，就是我的老大。老大是我的上级，更是我的师父。面试时，他问我很多我的项目上技术的细节问题（很多是通信方面的），我觉得他很厉害。实习期时，啥都不懂的我觉得所有的问题都问不倒他，很厉害。入组后，在编码设计时犯迷糊他的指导总是一针见血，让我少走很多弯路，很厉害。所以他这么厉害当初怎么会愿意选择我……现在想来，对于那时一个没什么C++基础的人，能找到一份C++开发的工作，何其幸哉。<br>　　还有一位同事，相识于面试，一起经过实习，一起进入同一个部门，共同走过试用期。在刚入公司很懵懂的时候，有一个人始终和你是同一战线，也是很幸运的事情。那段时间，两个人总是一起分享实习试用期间各种心情，共同讨论编程的问题，甚至吃饭的时候我们还会讨论当时要做的一个大作业的代码问题。虽然后来由于对自身规划不同，人各有志，她不愿意继续程序媛的生活，选择了离职，但是当初她先面试后跑回来告诉我们面试官问的很细不要招架不住的贴心、中午下班后还停留在工位上讨论技术问题、微信上吐槽分享心情的时光总是非常令人想念。<br>　　更加细节的技术总结写在了公司的工作总结里，这儿就不提了。<br>　　这是我的生命中的第一份工作，6个月以来，经历了第一次加班，第一次绩效奖励的惊喜，第一次绩效扣分的失落，第一份需求的完成，第一份文件的评审，第一次与这么多比我大的人一起合作。<br>　　我感到快乐，这就是我工作的理由。虽然工资不多，但我每天都在写代码的过程中获得成就感和点滴能力提升的快感（虽然有时也会因为缺陷改不动而焦虑失落），让我感觉自己写出来的东西是有价值的。公司里连董事长都坚持写代码，和员工讨论技术问题，我很佩服。同事们也都很关照包容我，让我快乐地做一个公司年龄最小的程序媛哈哈（趁着新一波的应届生还没来临之前赶紧体会）。所以我竟然会时不时冒出想加班的念头（随后怀疑自己怕是傻了吧）。<br>　　再谈C++，其实我觉得自己可能还没什么资格谈论它。它可能确实很难，但这样好像更容易激发我的好胜心。慢慢接触越多，C++的魅力就越能体现，它原来可以做那么多的事情。总有人问我，当程序员不累吗？呐，做自己热爱的事情怎么会感觉累？就像我现在写这篇文章都不想去睡觉一样。<br>　　工作以前，我觉得工作了的人和学生的生活是天壤之别，简直没有共同语言。当自己也成为一个社会人时，才感觉其实社会也不是那么可怕，而自己的生活虽说有了新变化，但本质里还是当初那个愿意追求所爱的青年，只是可能更加成熟理智些罢了。就像我写在云村里的一条动态一样：“有时会庆幸考研失败，没有一条路到黑，让我足够冷静下来，认真去想清楚，我到底喜欢的是什么，可以无悔地热爱一生。拼搏确实不该盲目，否则只是肤浅地让自己感动，这大概是17于我的意义吧。想来这一年的跌宕起伏，不由嘴角上扬。原来人生的转折点不必精心安排，它会以一种不经意的形式降临，不假思索甚至有些任性。”我才发现，我喜欢的从来不是一劳永逸的安稳，而是未知带来的无尽可能性。<br>　　唯一的不悦来自自身，深感编程能力的不足与工程和业务能力的匮乏。内心十分渴望成为一名合格的程序员，然后真正配得上软件工程师的“工程师”三个字。所以，辞旧迎新之际，希望2018实现一个具体的要求：每日看足1小时技术类图书，以及<strong>不要熬夜</strong>。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　写于2017年12月31日凌晨2点</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3657596153,515868233&amp;fm=27&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;原来人生的转折点不必精心安排，它会以一种不经意的形式降临，不假思索甚至有些任性。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://hubojing.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://hubojing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>知识杂记</title>
    <link href="https://hubojing.github.io/2017/11/25/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2017/11/25/知识杂记/</id>
    <published>2017-11-25T13:49:36.000Z</published>
    <updated>2017-12-07T15:22:32.303Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1507832615047&di=310b98ca6b643d5d1e0ffb85d8247dcd&imgtype=0&src=http%3A%2F%2Fwww.5itjob.com%2Fuploads%2Fallimg%2F161129%2F1-1611291414392E.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>每个月的流量大多贡献给查资料了，学习果然是件烧钱的事情啊（正经脸）</strong><br><br><br> </div><a id="more"></a><p>清空手机谷歌浏览器缓存的二十几个网页，也做一个简单的知识回顾。</p><h1 id="使用CImage加载PNG的一般方法"><a href="#使用CImage加载PNG的一般方法" class="headerlink" title="使用CImage加载PNG的一般方法"></a>使用CImage加载PNG的一般方法</h1><ol><li>打开stdafx.h添加<code>#include&lt;atlimage.h&gt;</code>；</li><li>定义一个CImage类对象，调用CImage::Load方法装载一个外部图像文件；</li><li>调用CImage::Draw方法绘制图像。</li></ol><p>eg.(待测试)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CRect rc;</span><br><span class="line">m_picCtrl.GetClientRect(&amp;rc);</span><br><span class="line">SetWindowPos(this, 0, 0, 320, 80, SWP_SHOWWINDOW);</span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.Format(_T(&quot;%d%d&quot;), rc.right, rc.bottom);</span><br><span class="line">CImage image;</span><br><span class="line">image.Load(_T(&quot;D:\\1.png&quot;));</span><br><span class="line">CDC* pDc = m_picCtrl.GetWindowDC();//获取设备句柄</span><br><span class="line">image.Draw(pDc-&gt;m_hDC, rc);</span><br><span class="line">UpdateWindow();</span><br></pre></td></tr></table></figure></p><h1 id="MFC-tab控件"><a href="#MFC-tab控件" class="headerlink" title="MFC tab控件"></a>MFC tab控件</h1><ol><li>创建一个对话框，放tab控件，将控件添加变量m_tabCtrl</li><li>再创建两个对话框，修改属性Border:none，Style:Child</li><li><p>在tabDlg中添加两个对话框类变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CDialog1 m_dlg1;</span><br><span class="line">CDialog2 m_dlg2;</span><br></pre></td></tr></table></figure></li><li><p>在tabDlg的OnInitDialog()函数中添加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CRect rect;</span><br><span class="line">m_tabCtrl.GetClientRect(&amp;rect);</span><br><span class="line">rect.top+=<span class="number">20</span>;</span><br><span class="line">rect.bottom-=<span class="number">1</span>;</span><br><span class="line">rect.left+<span class="number">1</span>=<span class="number">1</span>;</span><br><span class="line">rect.right-=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">m_tabCtrl.InsertItem(<span class="number">0</span>,<span class="string">"第一页"</span>);</span><br><span class="line">m_tabCtrl.InsertItem(<span class="number">1</span>,<span class="string">"第二页"</span>);</span><br><span class="line"></span><br><span class="line">m_dlg1.Create(IDD_DIALOG1,&amp;m_tabCtrl);<span class="comment">//或者Create(IDD_DIALOG1,GetDlgItem(IDC_TAB));</span></span><br><span class="line">m_dlg2.Create(IDD_DIALOG2,&amp;m_tabCtrl);</span><br><span class="line"></span><br><span class="line">m_dlg1.ShowWindow(&amp;rect);</span><br><span class="line">m_dlg2.ShowWindow(&amp;rect);</span><br><span class="line"></span><br><span class="line">m_dlg1.ShowWindow(<span class="literal">true</span>);</span><br><span class="line">m_dlg2.ShowWindow(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>在tabDlg中添加TCN_SELECHANGE消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CtabDlg::OnTcnSelchangeTab1(NMHDR *PNMHDR, LRSULT *pResult)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(m_tabCtrl.GetCurSel())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">m_dlg1.ShowWindow(<span class="literal">true</span>);</span><br><span class="line">m_dlg2.SWP_SHOWWINDOW(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case1:</span><br><span class="line">m_dlg1.ShowWindow(<span class="literal">false</span>);</span><br><span class="line">m_dlg2.ShowWindow(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="安全函数"><a href="#安全函数" class="headerlink" title="安全函数"></a>安全函数</h1><p>strtok_s<br>wcstok_s</p><h1 id="在MFC对话框中显示html网页"><a href="#在MFC对话框中显示html网页" class="headerlink" title="在MFC对话框中显示html网页"></a>在MFC对话框中显示html网页</h1><p>创建对话框时勾选html对话框，添加控件变量m_html;<br>然后在OnInitDialog()中添加<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_html.Navigate(<span class="string">"www.baidu.com"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="CXImage的使用"><a href="#CXImage的使用" class="headerlink" title="CXImage的使用"></a>CXImage的使用</h1><p>另成一篇。</p><h1 id="限制只启动一个exe"><a href="#限制只启动一个exe" class="headerlink" title="限制只启动一个exe"></a>限制只启动一个exe</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(FindWindow(<span class="literal">NULL</span>,<span class="string">"caption"</span>)！= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="string">"程序已运行！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PCE-js"><a href="#PCE-js" class="headerlink" title="PCE.js"></a>PCE.js</h1><p><a href="https://jamesfriend.com.au/pce-js/mobile/" target="_blank" rel="noopener">https://jamesfriend.com.au/pce-js/mobile/</a></p><h1 id="MFC复选框"><a href="#MFC复选框" class="headerlink" title="MFC复选框"></a>MFC复选框</h1><p>法一：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CButton* pBtn=(CButton*)GetDlgItem(IDC_CHECK1);</span><br><span class="line"><span class="keyword">int</span> state = pBtn-&gt;GetCheck();</span><br></pre></td></tr></table></figure></p><p>state==0 复选框没有被选中<br>state==1 复选框被选中<br>state==2 不确定（只有button有BS_3STATE或BS_AUTO3STATE style时才可用）<br>设置状态：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CButton* pBtn=(CButton*)GetDlgItem(IDC_CHECK1);</span><br><span class="line"><span class="keyword">int</span> state = pBtn-&gt;GetCheck(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>法二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(BST_CHECKED == IsDlgButtonChecked(IDC_CHECK1))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//对应操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用BS_AUTOCHECKBOX、BS_AUTORADIOBUTTON、BS_AUTO3STATE、BS_CHECKBOX、BS_RADIOBUTTON或BS_3STATE样式创建的按钮的返回值可以是如下值之一：<br>BST_CHECKED  按钮被选中<br>BST_UNCHECKED 按钮未被选中<br>BST_INDETERMINATE 不确定，按钮灰显（只有button有BS_3STATE或BS_AUTO3STATE style时才可用）</p><p>法三：<br>为控件添加BOOL变量m_delete;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::DoDataExchange(CDataExchange *pDX)</span><br><span class="line">&#123;</span><br><span class="line">CTestDlg::DoDataExchange(pDX);</span><br><span class="line">DDX_Check(pDX,IDC_CHECK1,m_delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="关于“不允许指针指向不完整的类类型”问题分析"><a href="#关于“不允许指针指向不完整的类类型”问题分析" class="headerlink" title="关于“不允许指针指向不完整的类类型”问题分析"></a>关于“不允许指针指向不完整的类类型”问题分析</h1><p>神贴必看，自从看过后，再也没犯过这个错，我不会说脑海里都是作者满满的嘲讽笑声的<br><a href="http://m.blog.csdn.net/luna84/article/details/50380186" target="_blank" rel="noopener">http://m.blog.csdn.net/luna84/article/details/50380186</a></p><h1 id="树节点遍历"><a href="#树节点遍历" class="headerlink" title="树节点遍历"></a>树节点遍历</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Traverse(m_tree, hChild)</span><br><span class="line">&#123;</span><br><span class="line">HTREEITEM hChild = m_tree.GetChildren(hItem);</span><br><span class="line"><span class="keyword">while</span>(hChild)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> temp=Traverse(m_tree,hChild);</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">hChild=m_tree.GetNextSiblingItem(hChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="遍历Vector的几种方法"><a href="#遍历Vector的几种方法" class="headerlink" title="遍历Vector的几种方法"></a>遍历Vector的几种方法</h1><p>C++11<br>法一：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;vec.size();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>iTemp = vec[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>法二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.begin();it!=vec.end();++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> iTemp = *it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>法三：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:vec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> iTemp = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>法四：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for_each(vec.begin(),vec.end(),[](<span class="keyword">int</span> i)&#123;</span><br><span class="line"><span class="keyword">int</span> iTemp = i;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="表达式的副作用"><a href="#表达式的副作用" class="headerlink" title="表达式的副作用"></a>表达式的副作用</h1><p><a href="http://www.cnblogs.com/shiguangshuo/p/5236962.html" target="_blank" rel="noopener">http://www.cnblogs.com/shiguangshuo/p/5236962.html</a></p><h1 id="理解递归"><a href="#理解递归" class="headerlink" title="理解递归"></a>理解递归</h1><p>另成一篇。</p><h1 id="屏蔽回车和ESE"><a href="#屏蔽回车和ESE" class="headerlink" title="屏蔽回车和ESE"></a>屏蔽回车和ESE</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL CTestDlg::PreTranslateMessage(MSG* pMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pMsg-&gt;message==WM_KEYDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pMsg-&gt;wParam==VK_RETURN||pMsg-&gt;wParam==VK_ESCAPE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CDialogEx::PreTranslateMessage(pMsg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MFC查找特定后缀文件"><a href="#MFC查找特定后缀文件" class="headerlink" title="MFC查找特定后缀文件"></a>MFC查找特定后缀文件</h1><p>法一：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CFileFind findfile;</span><br><span class="line">CString strPath;</span><br><span class="line">CString strName;</span><br><span class="line">CString strFilePath;</span><br><span class="line">BOOL bRet=findfile.FindFile(strPath+_T(<span class="string">"*.txt"</span>));<span class="comment">//以.txt为例</span></span><br><span class="line"><span class="keyword">if</span>(!bRet)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"无此文件！"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(bRet)</span><br><span class="line">&#123;</span><br><span class="line">bRet=findfile.FindNextFile();</span><br><span class="line">strName=findfile.GetFileTitle();</span><br><span class="line">strFilePath=findfile.GetFilePath();</span><br><span class="line"><span class="keyword">if</span>(<span class="comment">//操作)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//所需操作;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>法二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;CString&gt; fileList;</span><br><span class="line">WIN32_FIND_DATA wfd;</span><br><span class="line">CString sPath=_T(<span class="string">"*.txt"</span>);</span><br><span class="line">HANDLE hFile=FindFirstFile(sPath.GetBuffer(),&amp;wfd);</span><br><span class="line"><span class="keyword">if</span>(INVALID_HANDLE_VALUE==hFile)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(_T(<span class="string">"不合法！\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">fileList.push_back(wfd.cFileName);</span><br><span class="line">TRACE(<span class="string">"%s\n"</span>,wfd.cFileName);</span><br><span class="line">&#125;<span class="keyword">while</span>(FindNextFile(hFile,&amp;wfd));</span><br></pre></td></tr></table></figure></p><p>使用WIN32_FIND_DATA好像存在内存释放的问题。</p><h1 id="为CDHtmlDialog添加滚动条"><a href="#为CDHtmlDialog添加滚动条" class="headerlink" title="为CDHtmlDialog添加滚动条"></a>为CDHtmlDialog添加滚动条</h1><p>初始化中添加以下代码即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHostFlags(DOCHOSTUIFLAG_NO3DBORDER|DOCHOSTUIFLAG_DIALOG);</span><br></pre></td></tr></table></figure></p><p>Notepad++ 没有自动补全敲代码好累…</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1507832615047&amp;di=310b98ca6b643d5d1e0ffb85d8247dcd&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.5itjob.com%2Fuploads%2Fallimg%2F161129%2F1-1611291414392E.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;每个月的流量大多贡献给查资料了，学习果然是件烧钱的事情啊（正经脸）&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="MFC" scheme="https://hubojing.github.io/tags/MFC/"/>
    
  </entry>
  
</feed>
